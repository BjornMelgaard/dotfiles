17:40:36 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"eval","params":["[!!get(g:, 'LanguageClient_autoStart', 1), get(g:, 'LanguageClient_serverCommands', {}), get(g:, 'LanguageClient_selectionUI', v:null), get(g:, 'LanguageClient_trace', v:null), expand(get(g:, 'LanguageClient_settingsPath', '.vim/settings.json')), !!get(g:, 'LanguageClient_loadSettings', 1), get(g:, 'LanguageClient_rootMarkers', v:null), get(g:, 'LanguageClient_changeThrottle', v:null), get(g:, 'LanguageClient_waitOutputTimeout', v:null), !!get(g:, 'LanguageClient_diagnosticsEnable', 1), get(g:, 'LanguageClient_diagnosticsList', 'Quickfix'), get(g:, 'LanguageClient_diagnosticsDisplay', {}), get(g:, 'LanguageClient_windowLogMessageLevel', 'Warning'), get(g:, 'LanguageClient_hoverPreview', 'Auto'), get(g:, 'LanguageClient_completionPreferTextEdit', 0), has('nvim')]"],"id":4}
17:40:36 INFO reader-main src/vim.rs:389 <= None {"id": 4, "jsonrpc": "2.0", "result": [1, {"typescript": ["javascript-typescript-stdio"], "haskell": ["hie", "--lsp"], "nix": ["nix-lsp"], "javascript": ["javascript-typescript-stdio"]}, null, null, ".vim/settings.json", 1, null, null, null, 1, "Quickfix", {}, "Warning", "Auto", 0, 1]}
17:40:36 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"eval","params":["[get(g:, 'LanguageClient_diagnosticsSignsMax', v:null)]"],"id":5}
17:40:36 INFO reader-main src/vim.rs:389 <= None {"id": 5, "jsonrpc": "2.0", "result": [null]}
17:40:36 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"eval","params":["get(g:, 'loaded_fzf')"],"id":6}
17:40:36 INFO reader-main src/vim.rs:389 <= None {"id": 6, "jsonrpc": "2.0", "result": 0}
17:40:36 DEBUG main src/vim.rs:329 state.serverCommands.typescript: null ==> ["javascript-typescript-stdio"]
17:40:36 DEBUG main src/vim.rs:329 state.serverCommands.nix: null ==> ["nix-lsp"]
17:40:36 DEBUG main src/vim.rs:329 state.serverStderr: null ==> "language-server.log"
17:40:36 DEBUG main src/vim.rs:329 state.loadSettings: false ==> true
17:40:36 DEBUG main src/vim.rs:329 state.serverCommands.javascript: null ==> ["javascript-typescript-stdio"]
17:40:36 DEBUG main src/vim.rs:329 state.loggingLevel: "WARN" ==> "DEBUG"
17:40:36 DEBUG main src/vim.rs:329 state.serverCommands.haskell: null ==> ["hie","--lsp"]
17:40:36 DEBUG main src/vim.rs:329 state.is_nvim: false ==> true
17:40:36 DEBUG main src/vim.rs:329 state.loggingFile: null ==> "nvim.log"
17:40:36 DEBUG main src/vim.rs:329 state.trace: null ==> "off"
17:40:36 WARN main src/languageclient.rs:2060 Failed to start language server automatically. No language server command found for file type: vim.
17:40:36 INFO main src/languageclient.rs:2065 End languageClient/handleBufReadPost
17:40:36 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 840, "LSP#visible_line_start()": 771, "LSP#visible_line_end()": 842, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:36 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:36 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(840)]
17:40:36 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(771), Number(842)]
17:40:36 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"s:EchoEllipsis","params":[""]}
17:40:36 INFO main src/languageclient.rs:2169 Updating signs: []
17:40:36 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"execute","params":[],"id":7}
17:40:36 INFO reader-main src/vim.rs:389 <= None {"id": 7, "jsonrpc": "2.0", "result": 0}
17:40:36 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"nvim_buf_add_highlight","params":[0,0,"Error",1,1,1],"id":8}
17:40:36 INFO reader-main src/vim.rs:389 <= None {"id": 8, "jsonrpc": "2.0", "result": 1}
17:40:36 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"nvim_buf_clear_highlight","params":[0,1,771,842]}
17:40:36 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"s:AddHighlights","params":[1,[]]}
17:40:36 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:37 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 844, "LSP#visible_line_start()": 773, "LSP#visible_line_end()": 844, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:37 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:37 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(844)]
17:40:37 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(773), Number(844)]
17:40:37 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:38 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 843, "LSP#visible_line_start()": 773, "LSP#visible_line_end()": 844, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:38 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:38 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(843)]
17:40:38 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(773), Number(844)]
17:40:38 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:38 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 842, "LSP#visible_line_start()": 773, "LSP#visible_line_end()": 844, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:38 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:38 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(842)]
17:40:38 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(773), Number(844)]
17:40:38 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:38 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 841, "LSP#visible_line_start()": 773, "LSP#visible_line_end()": 844, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:38 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:38 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(841)]
17:40:38 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(773), Number(844)]
17:40:38 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:38 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 840, "LSP#visible_line_start()": 773, "LSP#visible_line_end()": 844, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:38 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:38 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(840)]
17:40:38 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(773), Number(844)]
17:40:38 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:38 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 839, "LSP#visible_line_start()": 773, "LSP#visible_line_end()": 844, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:38 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:38 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(839)]
17:40:38 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(773), Number(844)]
17:40:38 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:39 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 803, "LSP#visible_line_start()": 737, "LSP#visible_line_end()": 808, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:39 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:39 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(803)]
17:40:39 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(737), Number(808)]
17:40:39 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:39 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 767, "LSP#visible_line_start()": 701, "LSP#visible_line_end()": 772, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:39 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:39 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(767)]
17:40:39 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(701), Number(772)]
17:40:39 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:39 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 731, "LSP#visible_line_start()": 665, "LSP#visible_line_end()": 736, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:39 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:39 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(731)]
17:40:39 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(665), Number(736)]
17:40:39 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:39 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 695, "LSP#visible_line_start()": 620, "LSP#visible_line_end()": 700, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:39 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:39 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(695)]
17:40:39 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(620), Number(700)]
17:40:39 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:39 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 659, "LSP#visible_line_start()": 573, "LSP#visible_line_end()": 664, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:39 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:39 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(659)]
17:40:39 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(573), Number(664)]
17:40:39 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:40 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 619, "LSP#visible_line_start()": 526, "LSP#visible_line_end()": 619, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:40 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:40 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(619)]
17:40:40 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(526), Number(619)]
17:40:40 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:40 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 572, "LSP#visible_line_start()": 490, "LSP#visible_line_end()": 572, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:40 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:40 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(572)]
17:40:40 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(490), Number(572)]
17:40:40 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:42 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 233, "LSP#visible_line_start()": 198, "LSP#visible_line_end()": 269, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:42 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:42 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(233)]
17:40:42 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(198), Number(269)]
17:40:42 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:43 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 245, "LSP#visible_line_start()": 198, "LSP#visible_line_end()": 269, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:43 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:43 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(245)]
17:40:43 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(198), Number(269)]
17:40:43 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:43 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 250, "LSP#visible_line_start()": 210, "LSP#visible_line_end()": 281, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:43 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:43 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(250)]
17:40:43 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(210), Number(281)]
17:40:43 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:44 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 251, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:44 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:44 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(251)]
17:40:44 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:44 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:44 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 252, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:44 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:44 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(252)]
17:40:44 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:44 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:44 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 253, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:44 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:44 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(253)]
17:40:44 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:44 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:44 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 254, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:44 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:44 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(254)]
17:40:44 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:44 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:45 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 255, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:45 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:45 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(255)]
17:40:45 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:45 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:45 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 256, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:45 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:45 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(256)]
17:40:45 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:45 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:45 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 257, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:45 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:45 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(257)]
17:40:45 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:45 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:45 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 258, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:45 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:45 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(258)]
17:40:45 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:45 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:45 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 259, "LSP#visible_line_start()": 215, "LSP#visible_line_end()": 286, "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:45 INFO main src/languageclient.rs:2122 Begin languageClient/handleCursorMoved
17:40:45 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename, Line] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim"), Number(259)]
17:40:45 INFO main src/languageclient.rs:46 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(215), Number(286)]
17:40:45 INFO main src/languageclient.rs:2211 End languageClient/handleCursorMoved
17:40:46 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleTextChanged", "jsonrpc": "2.0", "params": {"languageId": "vim", "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:46 INFO main src/languageclient.rs:2070 Begin languageClient/handleTextChanged
17:40:46 INFO main src/languageclient.rs:46 gather_args: [Buftype, Filename] = [String(""), String("/home/srghma/.dotfiles/nvim/init.vim")]
17:40:46 INFO main src/languageclient.rs:1659 Begin textDocument/didChange
17:40:46 INFO main src/languageclient.rs:46 gather_args: [Buftype, LanguageId, Filename] = [String(""), String("vim"), String("/home/srghma/.dotfiles/nvim/init.vim")]
17:40:46 INFO main src/languageclient.rs:1668 Not opened yet. Switching to didOpen.
17:40:46 INFO main src/languageclient.rs:1611 Begin textDocument/didOpen
17:40:46 INFO main src/languageclient.rs:29 Some arguments are not available. Requesting from vim. Keys: ["text"]. Exps: ["LSP#text()"]
17:40:46 INFO main src/vim.rs:90 => None {"jsonrpc":"2.0","method":"eval","params":["[LSP#text()]"],"id":9}
17:40:46 INFO reader-main src/vim.rs:389 <= None {"id": 9, "jsonrpc": "2.0", "result": [["\" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0", "\" original from https://github.com/bling/dotvim", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Initialize defaults", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" setup & dein {{{", "  set rtp+=~/.config/nvim/bundle/repos/github.com/Shougo/dein.vim", "  call dein#begin(expand('~/.config/nvim/bundle/'))", "  call dein#add('Shougo/dein.vim')", "\"}}}", "", "let s:cache_dir = '~/.config/nvim/.cache'", "let s:settings = {}", "let s:settings.default_indent = 2", "let s:settings.max_column = 120", "", "\" helper functions", "function! s:get_cache_dir(suffix) \"{{{", "  return resolve(expand(s:cache_dir . '/' . a:suffix))", "endfunction \"}}}", "", "function! EnsureExists(path) \"{{{", "  if !isdirectory(expand(a:path))", "    call mkdir(expand(a:path))", "  endif", "endfunction \"}}}", "", "\" swap files", "let &directory = s:get_cache_dir('swap')", "set noswapfile", "", "call EnsureExists(s:cache_dir)", "call EnsureExists(&directory)", "", "if !executable('ag')", "  echoerr('You must install silver searcher')", "endif", "", "\" base configuration", "set showfulltag", "set shell=/bin/sh", "set noshelltemp                                     \"use pipes", "set clipboard=unnamed", "set inccommand=nosplit", "set undofile", "\" set paste", "", "\" whitespace", "set expandtab                                       \"spaces instead of tabs", "let &tabstop=s:settings.default_indent              \"number of spaces per tab for display", "let &softtabstop=s:settings.default_indent          \"number of spaces per tab in insert mode", "let &shiftwidth=s:settings.default_indent           \"number of spaces when indenting", "set list                                            \"highlight whitespace", "set listchars=tab:│\\ ,trail:•,extends:❯,precedes:❮,space:·", "set shiftround", "set linebreak", "let &showbreak='↪ '", "", "set wildmode=list:full", "set wildignorecase", "", "set splitbelow", "set splitright", "", "\" searching", "set ignorecase                                      \"ignore case for searching", "set smartcase                                       \"do case-sensitive if there's a capital letter", "set grepprg=ag\\ --nogroup\\ --column\\ --smart-case\\ --nocolor\\ --follow", "set grepformat=%f:%l:%c:%m", "", "let mapleader = \",\"", "let g:mapleader = \",\"", "let maplocalleader = \"\\\\\"", "", "\" ui configuration", "set showmatch                                       \"automatically highlight matching braces/brackets/etc.", "set matchtime=2                                     \"tens of a second to show matching parentheses", "set number", "set lazyredraw", "set noshowmode", "set foldmethod=syntax                               \"fold via syntax of files", "set foldlevelstart=99                               \"open all folds by default", "let g:xml_syntax_folding=1                          \"enable xml folding", "set completeopt-=preview", "", "set cursorline", "autocmd WinLeave * setlocal nocursorline", "autocmd WinEnter * setlocal cursorline", "let &colorcolumn=s:settings.max_column", "", "\" set hidden", "", "\" shared helper", "function! Preserve(command) \"{{{", "  \" preparation: save last search, and cursor position.", "  let _s=@/", "  let l = line(\".\")", "  let c = col(\".\")", "  \" do the business:", "  execute a:command", "  \" clean up: restore previous search history, and cursor position", "  let @/=_s", "  call cursor(l, c)", "endfunction \"}}}", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Core", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('vim-scripts/matchit.zip')", "call dein#add('vim-airline/vim-airline') \"{{{", "  let g:airline_powerline_fonts = 1", "  let g:airline#extensions#tabline#enabled = 1", "  let g:airline#extensions#tabline#left_sep = ' '", "  let g:airline#extensions#tabline#left_alt_sep = '¦'", "  let g:airline#extensions#tabline#buffer_idx_mode = 1", "  let g:airline#extensions#syntastic#enabled = 1", "  nmap <leader>1 <Plug>AirlineSelectTab1", "  nmap <leader>2 <Plug>AirlineSelectTab2", "  nmap <leader>3 <Plug>AirlineSelectTab3", "  nmap <leader>4 <Plug>AirlineSelectTab4", "  nmap <leader>5 <Plug>AirlineSelectTab5", "  nmap <leader>6 <Plug>AirlineSelectTab6", "  nmap <leader>7 <Plug>AirlineSelectTab7", "  nmap <leader>8 <Plug>AirlineSelectTab8", "  nmap <leader>9 <Plug>AirlineSelectTab9", "\"}}}", "call dein#add('tpope/vim-surround')", "call dein#add('tpope/vim-repeat')", "call dein#add('tpope/vim-unimpaired') \"{{{", "  nmap <c-up> [e", "  nmap <c-down> ]e", "  vmap <c-up> [egv", "  vmap <c-down> ]egv", "\"}}}", "\" call dein#add('qpkorr/vim-bufkill')", "call dein#add('mhinz/vim-startify') \"{{{", "  let g:startify_session_dir = s:get_cache_dir('sessions')", "  let g:startify_change_to_vcs_root = 1", "  let g:startify_show_sessions = 1", "  let g:startify_session_before_save = [", "      \\ 'tabdo NERDTreeClose'", "      \\ ]", "  let g:startify_disable_at_vimenter = 1", "", "  \" enter last opened file if session was saved", "  autocmd VimEnter * nested", "    \\   if !argc()", "    \\ |   silent! execute \":SLoad \" . fnamemodify(getcwd(), ':t')", "    \\ |   redraw!", "    \\ | endif", "", "  nnoremap <F1> :Startify<cr>", "  nnoremap <leader>S :SSave <C-R>=fnamemodify(getcwd(), ':t')<cr><cr>", "\"}}}", "call dein#add('neomake/neomake') \" {{{", "  autocmd! BufWritePost * Neomake", "  let g:neomake_open_list = 0", "  \" let g:neomake_verbose = 3", "", "  let g:neomake_ruby_enabled_makers = ['rubocop']", "  let g:neomake_typescript_enabled_makers = ['tslint']", "  \" let g:neomake_typescript_tslint_args = ['--fix']", "", "  \" flow fix", "  \" call dein#add('benjie/neomake-local-eslint.vim')", "\" }}}", "call dein#add('zhaocai/GoldenView.Vim', {'on_map':['<Plug>ToggleGoldenViewAutoResize']}) \"{{{", "  let g:goldenview__enable_default_mapping=0", "\"}}}", "call dein#add('jszakmeister/vim-togglecursor')", "", "\" search with autocenter and autohide {{{", "  call dein#add('haya14busa/is.vim')", "  let g:is#do_default_mappings = 1", "", "  call dein#add('haya14busa/vim-asterisk')", "  let g:asterisk#keeppos = 1", "", "  map n <Plug>(is-n)zz", "  map N <Plug>(is-N)zz", "  map *  <Plug>(asterisk-z*)zz<Plug>(is-nohl-1)", "  map g* <Plug>(asterisk-gz*)zz<Plug>(is-nohl-1)", "  \" using comment on this", "  \" map #  <Plug>(asterisk-z#)zz<Plug>(is-nohl-1)", "  \" map g# <Plug>(asterisk-gz#)zz<Plug>(is-nohl-1)", "\" }}}", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Git", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('airblade/vim-gitgutter') \" {{{", "  nmap ]h <Plug>GitGutterNextHunk", "  nmap [h <Plug>GitGutterPrevHunk", "\" }}}", "call dein#add('tpope/vim-fugitive') \"{{{", "  nnoremap <silent> <leader>ga :Git add --all<CR>", "  nnoremap <silent> <leader>gs :Gstatus<CR>", "  nnoremap <silent> <leader>gd :Gdiff<CR>", "  nnoremap <silent> <leader>gc :Gcommit<CR>", "  nnoremap <silent> <leader>gb :Gblame<CR>", "  nnoremap <silent> <leader>gl :Glog<CR>", "  nnoremap <silent> <leader>gp :Git push<CR>", "  nnoremap <silent> <leader>gw :Gwrite<CR>", "  nnoremap <silent> <leader>gr :Gremove<CR>", "  autocmd BufReadPost fugitive://* set bufhidden=delete", "\"}}}", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Autocomplete", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('Shougo/neosnippet-snippets')", "call dein#add('Shougo/neosnippet') \" {{{", "  set conceallevel=2 concealcursor=niv", "  let g:neosnippet#snippets_directory='~/.config/nvim/snippets'", "", "  imap <C-k> <Plug>(neosnippet_expand_or_jump)", "  smap <C-k> <Plug>(neosnippet_expand_or_jump)", "  xmap <C-k> <Plug>(neosnippet_expand_target)", "", "  inoremap <expr><TAB>", "    \\ pumvisible() ? \"\\<C-n>\" :", "    \\ neosnippet#expandable_or_jumpable() ?", "    \\    \"\\<Plug>(neosnippet_expand_or_jump)\" : \"\\<TAB>\"", "  snoremap <expr><TAB> neosnippet#expandable_or_jumpable() ?", "    \\ \"\\<Plug>(neosnippet_expand_or_jump)\" : \"\\<TAB>\"", "", "\" }}}", "", "call dein#add('Shougo/deoplete.nvim') \" {{{", "  let g:deoplete#enable_at_startup = 1", "  let g:deoplete#auto_complete_delay = 150", "", "  \" initialize with empty, to use it later on per language", "  let g:deoplete#omni#input_patterns = {}", "", "  \" set completeopt=longest,menuone,preview", "  \"Amount of entries in completion popup", "\" }}}", "call dein#add('Shougo/echodoc.vim') \" {{{", "  set cmdheight=2", "  let g:echodoc_enable_at_startup = 1", "\" }}}", "\" \" call dein#add('thalesmello/webcomplete.vim')", "", "call dein#add('autozimu/LanguageClient-neovim', {", "    \\ 'rev': 'next',", "    \\ 'build': './install.sh',", "    \\ })", "", "let g:LanguageClient_serverCommands = {", "    \\ 'javascript': ['javascript-typescript-stdio'],", "    \\ 'typescript': ['javascript-typescript-stdio'],", "    \\ 'haskell': ['hie', '--lsp'],", "    \\ 'nix': ['nix-lsp'],", "    \\ }", "", "\" let g:LanguageClient_devel = 1 \" Use rust debug build", "let g:LanguageClient_loggingLevel = 'DEBUG' \" Use highest logging level", "\" let g:LanguageClient_loggingFile = 'nvim.log' \" Use highest logging level", "\" let g:LanguageClient_serverStderr = 'language-server.log' \" Use highest logging level", "", "\" Automatically start language servers.", "let g:LanguageClient_autoStart = 1", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Tmux", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('christoomey/vim-tmux-navigator')", "", "if $TMUX != ''", "  call dein#add('tmux-plugins/vim-tmux')", "  call dein#add('wellle/tmux-complete.vim')", "  call dein#add('benmills/vimux') \" {{{", "    let g:VimuxRunnerType = \"window\"", "    let g:VimuxUseNearest = 0", "", "    nnoremap <leader>tt :VimuxTogglePane<CR>", "    nnoremap <leader>to :call VimuxOpenRunner()<CR>", "    nnoremap <Leader>tl :VimuxRunLastCommand<CR>", "    nnoremap <Leader>tr ::call VimuxRunCommand(\"yr run && cat output/pipePFn.d.ts\")<CR>", "  \" }}}", "", "  \" tmux status line", "  autocmd VimEnter * silent! !tmux source ~/.dotfiles/tmux/themes/jellybeans_tmuxline", "  autocmd VimLeave * silent! !tmux source ~/.dotfiles/tmux/themes/iceberg_tmuxline", "", "  \" call dein#add('edkolev/tmuxline.vim') \" {{{", "  \"   let g:tmuxline_theme = 'jellybeans'", "  \"   let g:tmuxline_preset = 'minimal'", "  \" \" }}}", "endif", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Editing", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('editorconfig/editorconfig-vim', {'on_i':1})", "call dein#add('tpope/vim-endwise')", "call dein#add('tpope/vim-speeddating')", "call dein#add('thinca/vim-visualstar')", "", "function s:on_commentary_source()", "  xmap # gc", "  omap # gc", "  nmap # gcc", "endfunction", "call dein#add('tpope/vim-commentary', {'hook_post_source': function('s:on_commentary_source')})", "", "call dein#add('terryma/vim-expand-region') \" mapping - + and _", "call dein#add('chrisbra/NrrwRgn') \" mapping - ,nr", "call dein#add('jiangmiao/auto-pairs') \"{{{", "  let g:AutoPairsShortcutToggle = ''", "  let g:AutoPairsMapCh = 0 \" I use `move to left pane` here", "  let g:AutoPairsFlyMode = 0", "  let g:AutoPairsShortcutBackInsert = ''", "  let g:AutoPairsMultilineClose = 0", "\"}}}", "call dein#add('justinmk/vim-sneak') \"{{{", "  let g:sneak#streak = 1", "\"}}}", "call dein#add('tommcdo/vim-exchange')", "call dein#add('junegunn/vim-easy-align') \" {{{", "  xmap ga <Plug>(EasyAlign)", "  nmap ga <Plug>(EasyAlign)", "\" }}}", "call dein#add('bkad/CamelCaseMotion') \" {{{", "  map <silent> w <Plug>CamelCaseMotion_w", "  map <silent> b <Plug>CamelCaseMotion_b", "  map <silent> e <Plug>CamelCaseMotion_e", "  map <silent> ge <Plug>CamelCaseMotion_ge", "  sunmap w", "  sunmap b", "  sunmap e", "  sunmap ge", "\" }}}", "call dein#add('jeetsukumaran/vim-indentwise')", "call dein#add('AndrewRadev/splitjoin.vim') \" {{{", "  let g:splitjoin_ruby_hanging_args=0", "\" }}}", "\" mapping - gJ, gS", "call dein#add('tpope/vim-abolish') \" {{{", "  \" abolish current highlightment", "  nnoremap <leader>a \"+y//e<CR>:%Subvert:::g<left><left><left><C-r>+<right>", "  nnoremap <leader>A :%Subvert:::g<left><left><left>", "  vmap     <leader>A :Subvert:::g<left><left><left>", "\" }}}", "", "call dein#add('itchyny/vim-cursorword') \" underscore word under cursor", "call dein#add('AndrewRadev/switch.vim') \" mapping - gs", "call dein#add('romgrk/replace.vim') \" {{{", "  let g:replace_register = '_'", "  nmap R \"+<Plug>ReplaceOperator", "  vmap R \"+<Plug>ReplaceOperator", "", "  nmap X \"+<Plug>ExchangeOperator", "  nmap RR cc<C-R>+<esc>", "\" }}}", "", "call dein#add('AndrewRadev/deleft.vim') \" mapping - dh", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Navigation", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\"call dein#add('mileszs/ack.vim') \"{{{", "\"  let g:ackprg = \"ag --nogroup --column --smart-case --follow\"", "\"\"}}}", "call dein#add('dkprice/vim-easygrep') \"{{{", "  let g:EasyGrepRecursive=1", "  let g:EasyGrepAllOptionsInExplorer=1", "  let g:EasyGrepCommand=1", "  let g:EasyGrepFilesToExclude=\".svn,.git,node_modules\"", "  nnoremap <leader>vo :GrepOptions<cr>", "\"}}}", "call dein#add('mbbill/undotree', {'on_cmd':'UndotreeToggle'}) \"{{{", "  let g:undotree_SplitLocation='botright'", "  let g:undotree_SetFocusWhenToggle=1", "  nnoremap <silent> <F5> :UndotreeToggle<CR>", "\"}}}", "call dein#add('scrooloose/nerdtree', {'on_cmd':['NERDTreeToggle','NERDTreeFind']}) \"{{{", "  let NERDTreeShowHidden=1", "  let NERDTreeQuitOnOpen=0", "  let NERDTreeShowLineNumbers=1", "  let NERDTreeChDirMode=0", "  let NERDTreeShowBookmarks=1", "  let NERDTreeIgnore=['\\.git$','\\.hg$','\\node_modules$','\\.pyc$']", "  let NERDTreeBookmarksFile=s:get_cache_dir('NERDTreeBookmarks')", "", "  \" disable f and F in privilege of find commands", "  let g:NERDTreeMapOpenVSplit='V'", "  let g:NERDTreeMapToggleFiles=''", "  let g:NERDTreeMapToggleFilters=''", "  let g:NERDTreeMapHelp='<M-/>'", "", "  let g:NERDTreeMapQuit='Q'", "  nnoremap <F2> :NERDTreeToggle<CR>", "  nnoremap <F3> :NERDTreeFind<CR>", "\"}}}", "", "\"call dein#add('majutsushi/tagbar', {'on_cmd':'TagbarToggle'}) \"{{{", "\"  nnoremap <silent> <F9> :TagbarToggle<CR>", "\"\"}}}", "call dein#add('kshenoy/vim-signature')", "call dein#add('myusuf3/numbers.vim') \" {{{", "  nnoremap <silent> <F7> :NumbersToggle<cr>", "\" }}}", "", "function s:on_cleverf_source()", "  \" kakoune like find", "  nmap <M-.> <Plug>(clever-f-repeat-forward)", "  xmap <M-.> <Plug>(clever-f-repeat-forward)", "  omap <M-.> <Plug>(clever-f-repeat-forward)", "  nmap <M->> <Plug>(clever-f-repeat-back)", "  xmap <M->> <Plug>(clever-f-repeat-back)", "  omap <M->> <Plug>(clever-f-repeat-back)", "endfunction", "call dein#add('rhysd/clever-f.vim', {'hook_post_source': function('s:on_cleverf_source')})", "let g:clever_f_timeout_ms = 1 \" make clever_f unclever", "", "call dein#add('mhinz/vim-sayonara') \" {{{", "  let g:sayonara_confirm_quit = 1", "", "  nnoremap Q :Sayonara<cr>", "  nnoremap <M-q> :Sayonara!<cr>", "", "  nnoremap <leader>q :xa<cr>", "  nnoremap <leader>z :qa!<cr>", "\" }}}", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Unite", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "", "call dein#add('Shougo/denite.nvim') \" {{{", "  call denite#custom#var('file_rec', 'command', ['ag', '--vimgrep', '--hidden',", "    \\ '--ignore', '.hg',", "    \\ '--ignore', '.svn',", "    \\ '--ignore', '.git',", "    \\ '--ignore', '.bzr',", "    \\ '--ignore', '.cache'])", "  call denite#custom#map('normal', 'Q', '<denite:quit>', 'noremap')", "\" }}}", "call dein#add('Shougo/neomru.vim')", "", "nmap <space> [denite]", "nnoremap [denite] <nop>", "", "nnoremap <silent> [denite]l :<C-u>Denite line<cr>", "nnoremap <silent> [denite]m :<C-u>Denite file_mru <cr>", "nnoremap <silent> [denite]b :<C-u>Denite buffer<cr>", "nnoremap <silent> [denite]j :<C-u>JunkfileTodo<cr>", "nnoremap [denite]g :<C-u>Grep<space>", "\" nnoremap <silent> [denite]y :<C-u>Denite neoyank<cr>", "", "\" git project nav {{{", "  call denite#custom#alias('source', 'file_rec/git', 'file_rec')", "  call denite#custom#var('file_rec/git', 'command',", "    \\ ['git', 'ls-files', '-co', '--exclude-standard'])", "  nnoremap <silent> [denite]<space> :<C-u>Denite `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`<CR>", "\" }}}", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Textobj", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('kana/vim-textobj-user')", "call dein#add('kana/vim-textobj-indent')", "call dein#add('kana/vim-textobj-entire')", "call dein#add('lucapette/vim-textobj-underscore')", "call dein#add('beloglazov/vim-textobj-quotes')", "call dein#add('kana/vim-textobj-line')", "call dein#add('jasonlong/vim-textobj-css')", "call dein#add('b4winckler/vim-angry')", "call dein#add('saihoooooooo/vim-textobj-space')", "", "\" file text object", "call textobj#user#plugin('file', {", "  \\ 'file': {", "  \\ 'pattern': '\\f\\+', 'select': ['af', 'if']", "  \\ }", "  \\ })", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Web", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('groenewege/vim-less', {'on_ft':['less']})", "call dein#add('cakebaker/scss-syntax.vim', {'on_ft':['scss','sass']})", "call dein#add('hail2u/vim-css3-syntax', {'on_ft':['css','scss','sass']})", "call dein#add('othree/html5.vim', {'on_ft':['html','typescript']})", "call dein#add('digitaltoad/vim-pug', {'on_ft':['pug', 'vue']})", "call dein#add('mustache/vim-mustache-handlebars', {'on_ft':['mustache','handlebars']})", "call dein#add('Valloric/MatchTagAlways')", "call dein#add('slim-template/vim-slim', {'on_ft':['slim']})", "call dein#add('mattn/emmet-vim', {'on_ft':['html','vue','xml','xsl','xslt','xsd','css','sass','scss','less','mustache','handlebars','ts','javascript','jsx','typescript','eruby']})", "autocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby imap <buffer><c-y><c-y> <c-y>,", "autocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby vmap <buffer><c-y><c-y> <c-y>,", "", "\" TextField to <TextField />", "autocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby imap <buffer><c-y>y <esc>ysiw>f>i<space>/<c-o>h", "", "\" Attribute deletion", "autocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby nm dA lF d2f\"", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Javascript", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('othree/yajs.vim')", "call dein#add('kchmck/vim-coffee-script', {'on_ft':['coffee']})", "call dein#add('mmalecki/vim-node.js', {'on_ft':['javascript']})", "call dein#add('leshill/vim-json', {'on_ft':['javascript','json']})", "call dein#add('othree/javascript-libraries-syntax.vim', {'on_ft':['javascript','coffee','ls','typescript']})", "call dein#add('heavenshell/vim-jsdoc', {'on_ft':['javascript','typescript']})", "", "let g:used_javascript_libs = 'underscore,ramda,react'", "", "\" typescript", "\" call dein#add('mhartington/nvim-typescript', { 'on_ft':['typescript'] })", "call dein#add('leafgarland/typescript-vim', { 'on_ft':['typescript'] })", "", "\" flow", "\" call dein#add('flowtype/vim-flow', { 'on_ft':['javascript'] })", "", "\" vue", "\" call dein#add('posva/vim-vue')", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Ruby", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('tpope/vim-rails', {'on_ft':['ruby']})", "call dein#add('rhysd/vim-textobj-ruby', {'on_ft':['ruby']})", "call dein#add('fishbullet/deoplete-ruby', {'on_ft':['ruby']})", "\" call dein#add('thoughtbot/vim-rspec', {'on_ft':['ruby']})", "", "let neosimpp_path = '~/.config/nvim/bundle/repos/github.com/Shougo/neosnippet-snippets/neosnippets/'", "exec \"au BufNewFile,BufRead Gemfile NeoSnippetSource \".neosimpp_path.\"Gemfile.snip\"", "exec \"au BufNewFile,BufRead *.rb NeoSnippetSource \".neosimpp_path.\"rails.snip\"", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Elm", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" call dein#add('ElmCast/elm-vim') \" {{{", "\"   let g:elm_format_autosave = 1", "\"   let g:elm_setup_keybindings = 0 \" use bindings from ftplugin/elm.vim", "", "\"   let g:syntastic_always_populate_loc_list = 1", "\"   let g:syntastic_auto_loc_list = 1", "\"   let g:elm_syntastic_show_warnings = 1", "", "\"   \" let g:deoplete#omni#functions.elm = ['elm#Complete']", "\"   \" let g:deoplete#omni#input_patterns.elm = '[^ \\t]+'", "\"   \" let g:deoplete#sources.elm = ['omni'] + g:deoplete#sources._", "\" \" }}}", "\" call dein#add('pbogut/deoplete-elm')", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Idris", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" call dein#add('idris-hackers/idris-vim')", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Python", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" call dein#add('hdima/python-syntax')", "\" let python_highlight_all = 1", "\" let python_version_2 = 1", "", "call dein#add('vim-python/python-syntax')", "let g:python_highlight_all = 1", "let g:python_version_2 = 1", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Haskell", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('neovimhaskell/haskell-vim', { 'on_ft':['haskell'] })", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => C#", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" call dein#add('Robzz/deoplete-omnisharp', { 'on_ft':['cs'] })", "\" call dein#add('OmniSharp/omnisharp-vim', { 'on_ft':['cs'] })", "\" let g:deoplete#omni#functions = {}", "\" let g:deoplete#omni#functions.cs = 'OmniSharp#Complete'", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Purescript", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" call dein#add('purescript-contrib/purescript-vim', { 'on_ft':['purescript'] })", "\" call dein#add('FrigoEU/psc-ide-vim', { 'on_ft':['purescript'] })", "\" let g:psc_ide_log_level=4", "", "\" checking in file", "\" let g:deoplete#omni#input_patterns.purescript = '[^. *\\t]'", "\" let g:deoplete#omni#input_patterns.purescript = '[.\\w]+'", "\" checking wia `pulp -w build` (faster)", "\" let g:psc_ide_syntastic_mode = 0", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Misc", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" call dein#add('kana/vim-vspec') \" Testing framework", "call dein#add('jparise/vim-graphql', {'on_ft':['graphql']})", "call dein#add('tpope/vim-scriptease', {'on_ft':['vim']})", "call dein#add('tpope/vim-markdown',{'on_ft':['markdown']})", "call dein#add('PotatoesMaster/i3-vim-syntax',{'on_ft':['i3']})", "call dein#add('chr4/nginx.vim',{'on_ft':['nginx']})", "call dein#add('vim-scripts/vim-terraform',{'on_ft':['terraform']})", "call dein#add('LnL7/vim-nix', { 'on_ft':['nix'] })", "", "\" call dein#add('takac/vim-hardtime') \" {{{", "\"   let g:hardtime_default_on = 1", "\"   let g:hardtime_allow_different_key = 1", "\"   let g:hardtime_maxcount = 2", "", "\"   \" doesnt work with wb actually", "\"   let s:hardtime_abandoned_keys = [\"h\", \"j\", \"k\", \"l\", \"-\", \"+\", \"W\", \"B\"]", "\"   let g:list_of_normal_keys = s:hardtime_abandoned_keys", "\"   let g:list_of_visual_keys = s:hardtime_abandoned_keys", "", "\"   \" let g:hardtime_ignore_buffer_patterns = [\".*fugitive.*\", \"[unite].*\"]", "\" \" }}}", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Documets editing", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" call dein#add('maksimr/vim-translator')", "\" call dein#add('suan/vim-instant-markdown')", "", "\" autocmd InsertEnter * silent! !xkbcomp $HOME/.config/layouts/ua $DISPLAY  > /dev/null 2&>1", "\" autocmd InsertLeave * silent! !xkbcomp $HOME/.config/layouts/en_ru $DISPLAY > /dev/null 2&>1", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => GUI", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" call dein#add('tpope/vim-dispatch') \" {{{", "\"   \" call dein#add('radenling/vim-dispatch-neovim')", "\"   nnoremap <leader>rd :Dispatch<space>", "\"   nnoremap <leader>rD :Copen<CR>", "", "\"   \" open file under cursor in window above", "\"   nmap <leader>gf yif<C-k>:e <M-p><CR>", "\" }}}", "\" call dein#add('bramblex/ranger.vim', { 'depends': 'rbgrouleff/bclose.vim' }) \" {{{", "\"   let g:ranger_path='SHELL=/home/srghma/.config/ranger/rshell ranger --cmd \"set colorscheme snow\"'", "\" \" }}}", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Mappings", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "nnoremap <M-8> #", "", "nnoremap <leader>w :w<cr>", "nnoremap <leader>tag :!ctags -R .<cr>", "", "\" toggle paste", "nnoremap <F6> :set invpaste<CR>:set paste?<CR>", "", "\" remap arrow keys", "nnoremap <left> :bprev<CR>", "nnoremap <right> :bnext<CR>", "nnoremap <up> :tabnext<CR>", "nnoremap <down> :tabprev<CR>", "", "\" unimpaired tabs", "nnoremap ]w :tabnext<CR>", "nnoremap [w :tabprev<CR>", "", "\" quick resizing", "nnoremap <M-h> <C-w>3<", "nnoremap <M-l> <C-w>3>", "nnoremap <M-j> <C-w>3-", "nnoremap <M-k> <C-w>3+", "", "\" change cursor position in command mode", "cnoremap <M-h> <left>", "cnoremap <M-l> <right>", "cnoremap <M-j> <down>", "cnoremap <M-k> <up>", "", "\" will be rewritten if tmux run", "nnoremap <C-h> <C-w>h", "nnoremap <C-j> <C-w>j", "nnoremap <C-k> <C-w>k", "nnoremap <C-l> <C-w>l", "", "\" kakoune like movements", "noremap gh 0", "noremap gi ^", "noremap gl g_", "noremap gj G", "noremap gk gg", "", "inoremap <C-r> <C-r><C-p>", "inoremap <M-p> <C-r><C-p>+", "cnoremap <M-p> <C-r>+", "", "nnoremap p \"+p", "vnoremap p \"+p", "nnoremap <M-p> p", "vnoremap <M-p> p", "", "nnoremap P \"+P", "vnoremap P \"+P", "nnoremap <M-P> P", "vnoremap <M-P> P", "", "nnoremap y \"+y", "vnoremap y \"+y", "nnoremap <M-y> y", "vnoremap <M-y> y", "", "nnoremap Y \"+y$", "nnoremap <M-Y> y$", "vnoremap <M-Y> y$", "", "nnoremap ,d \"+d", "vnoremap ,d \"+d", "nnoremap ,D \"+D", "vnoremap ,D \"+D", "", "\" deleting", "inoremap <C-u> <C-g>u<C-u>", "inoremap <C-d> <Del>", "", "\" sane regex", "nnoremap / /\\v", "vnoremap / /\\v", "nnoremap ? ?\\v", "vnoremap ? ?\\v", "\" nnoremap :s/ :s/\\v", "", "\" quick substitute", "nnoremap dm :%s:::g<left><left><left>", "vnoremap dm :s:::g<left><left><left>", "", "\" command-line window", "nnoremap q: q:i", "nnoremap q/ q/i", "nnoremap q? q?i", "", "\" folds", "nnoremap zr zr:echo &foldlevel<cr>", "nnoremap zm zm:echo &foldlevel<cr>", "nnoremap zR zR:echo &foldlevel<cr>", "nnoremap zM zM:echo &foldlevel<cr>", "", "\" screen line scroll", "nnoremap <expr> j v:count > 1 ? \"j\" : \"gj\"", "nnoremap <expr> k v:count > 1 ? \"k\" : \"gk\"", "", "\" auto center", "nnoremap <silent> <C-o> <C-o>zz", "nnoremap <silent> <C-i> <C-i>zz", "", "\" reselect visual block after indent", "vnoremap < <gv", "vnoremap > >gv", "", "\" reselect last paste", "nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'", "", "\" shortcuts for windows", "nnoremap <leader>v <C-w>v<C-w>l", "nnoremap <leader>s <C-w>s", "nnoremap <leader>vsa :vert sba<cr>", "", "\" tab shortcuts", "nnoremap <leader>tn :tab spl<CR>", "nnoremap <leader>tc :tabclose<CR>", "", "\" quick buffer open", "nnoremap gb :ls<cr>:e #", "", "\" general", "nnoremap <leader>l :set list! list?<cr>", "nnoremap <bs> :noh<cr>", "nnoremap <M-v> vg_", "", "nnoremap <C-s> <C-a>", "nnoremap <leader>R :so $MYVIMRC<CR>", "", "\" in nvim terminal emulator", "tnoremap <C-\\><C-\\> <C-\\><C-n>", "tnoremap <left> <C-\\><C-n>:bprev<CR>", "tnoremap <right> <C-\\><C-n>:bnext<CR>", "tnoremap <up> <C-\\><C-n>:tabnext<CR>", "tnoremap <down> <C-\\><C-n>:tabprev<CR>", "", "\" J and K like in nerdtree", "map K <Plug>(IndentWiseBlockScopeBoundaryBegin)", "map J <Plug>(IndentWiseBlockScopeBoundaryEnd)", "", "nnoremap <M-i> J", "", "function! RemoveNonascii() abort", "  exe \"normal! :s:\\ \\|(\\|)\\|\\.::g\"", "endfunction", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Finish", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "call dein#add('nanotech/jellybeans.vim')", "call dein#add('ryanoasis/vim-devicons')", "", "call dein#end()", "", "if dein#check_install()", "  call dein#install()", "endif", "", "autocmd VimEnter * call dein#call_hook('post_source')", "", "filetype plugin indent on", "syntax enable", "colorscheme jellybeans", "", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" => Autocommands", "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\" go back to previous position of cursor if any", "autocmd BufReadPost *", "  \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") |", "  \\  exe 'normal! g`\"zvzz' |", "  \\ endif", "", "\" autosave", "autocmd FocusLost * silent! wall", "set autowriteall", "", "autocmd BufRead,BufNewFile *.conf setf dosini", "", "autocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}", "autocmd FileType python setlocal foldmethod=indent", "autocmd FileType markdown setlocal nolist", "autocmd FileType yaml,eruby.yaml setlocal tabstop=2 shiftwidth=2 commentstring=#\\ %s", "\" autocmd FileType typescript setlocal tabstop=2 shiftwidth=2 expandtab", "", "\" force filetype on odd extension", "au BufRead,BufNewFile Dockerfile.template set filetype=dockerfile", "au BufRead,BufNewFile *.js.erb set filetype=javascript", "au BufRead,BufNewFile *.mjml set filetype=slim", "au BufRead,BufNewFile Vagrantfile,Guardfile set filetype=ruby", "", "\" autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 expandtab", "\" autocmd FileType html,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=0 copyindent preserveindent noexpandtab", "", "\" nmap g[ 0ciw1<ESC>", "\" nmap g] 0kyiwjciw<M-p><ESC>", ""]]}
17:40:46 INFO main src/languageclient.rs:46 gather_args: [Buftype, LanguageId, Filename, Text] = [String(""), String("vim"), String("/home/srghma/.dotfiles/nvim/init.vim"), Array([String("\" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0"), String("\" original from https://github.com/bling/dotvim"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Initialize defaults"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" setup & dein {{{"), String("  set rtp+=~/.config/nvim/bundle/repos/github.com/Shougo/dein.vim"), String("  call dein#begin(expand(\'~/.config/nvim/bundle/\'))"), String("  call dein#add(\'Shougo/dein.vim\')"), String("\"}}}"), String(""), String("let s:cache_dir = \'~/.config/nvim/.cache\'"), String("let s:settings = {}"), String("let s:settings.default_indent = 2"), String("let s:settings.max_column = 120"), String(""), String("\" helper functions"), String("function! s:get_cache_dir(suffix) \"{{{"), String("  return resolve(expand(s:cache_dir . \'/\' . a:suffix))"), String("endfunction \"}}}"), String(""), String("function! EnsureExists(path) \"{{{"), String("  if !isdirectory(expand(a:path))"), String("    call mkdir(expand(a:path))"), String("  endif"), String("endfunction \"}}}"), String(""), String("\" swap files"), String("let &directory = s:get_cache_dir(\'swap\')"), String("set noswapfile"), String(""), String("call EnsureExists(s:cache_dir)"), String("call EnsureExists(&directory)"), String(""), String("if !executable(\'ag\')"), String("  echoerr(\'You must install silver searcher\')"), String("endif"), String(""), String("\" base configuration"), String("set showfulltag"), String("set shell=/bin/sh"), String("set noshelltemp                                     \"use pipes"), String("set clipboard=unnamed"), String("set inccommand=nosplit"), String("set undofile"), String("\" set paste"), String(""), String("\" whitespace"), String("set expandtab                                       \"spaces instead of tabs"), String("let &tabstop=s:settings.default_indent              \"number of spaces per tab for display"), String("let &softtabstop=s:settings.default_indent          \"number of spaces per tab in insert mode"), String("let &shiftwidth=s:settings.default_indent           \"number of spaces when indenting"), String("set list                                            \"highlight whitespace"), String("set listchars=tab:│\\ ,trail:•,extends:❯,precedes:❮,space:·"), String("set shiftround"), String("set linebreak"), String("let &showbreak=\'↪ \'"), String(""), String("set wildmode=list:full"), String("set wildignorecase"), String(""), String("set splitbelow"), String("set splitright"), String(""), String("\" searching"), String("set ignorecase                                      \"ignore case for searching"), String("set smartcase                                       \"do case-sensitive if there\'s a capital letter"), String("set grepprg=ag\\ --nogroup\\ --column\\ --smart-case\\ --nocolor\\ --follow"), String("set grepformat=%f:%l:%c:%m"), String(""), String("let mapleader = \",\""), String("let g:mapleader = \",\""), String("let maplocalleader = \"\\\\\""), String(""), String("\" ui configuration"), String("set showmatch                                       \"automatically highlight matching braces/brackets/etc."), String("set matchtime=2                                     \"tens of a second to show matching parentheses"), String("set number"), String("set lazyredraw"), String("set noshowmode"), String("set foldmethod=syntax                               \"fold via syntax of files"), String("set foldlevelstart=99                               \"open all folds by default"), String("let g:xml_syntax_folding=1                          \"enable xml folding"), String("set completeopt-=preview"), String(""), String("set cursorline"), String("autocmd WinLeave * setlocal nocursorline"), String("autocmd WinEnter * setlocal cursorline"), String("let &colorcolumn=s:settings.max_column"), String(""), String("\" set hidden"), String(""), String("\" shared helper"), String("function! Preserve(command) \"{{{"), String("  \" preparation: save last search, and cursor position."), String("  let _s=@/"), String("  let l = line(\".\")"), String("  let c = col(\".\")"), String("  \" do the business:"), String("  execute a:command"), String("  \" clean up: restore previous search history, and cursor position"), String("  let @/=_s"), String("  call cursor(l, c)"), String("endfunction \"}}}"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Core"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'vim-scripts/matchit.zip\')"), String("call dein#add(\'vim-airline/vim-airline\') \"{{{"), String("  let g:airline_powerline_fonts = 1"), String("  let g:airline#extensions#tabline#enabled = 1"), String("  let g:airline#extensions#tabline#left_sep = \' \'"), String("  let g:airline#extensions#tabline#left_alt_sep = \'¦\'"), String("  let g:airline#extensions#tabline#buffer_idx_mode = 1"), String("  let g:airline#extensions#syntastic#enabled = 1"), String("  nmap <leader>1 <Plug>AirlineSelectTab1"), String("  nmap <leader>2 <Plug>AirlineSelectTab2"), String("  nmap <leader>3 <Plug>AirlineSelectTab3"), String("  nmap <leader>4 <Plug>AirlineSelectTab4"), String("  nmap <leader>5 <Plug>AirlineSelectTab5"), String("  nmap <leader>6 <Plug>AirlineSelectTab6"), String("  nmap <leader>7 <Plug>AirlineSelectTab7"), String("  nmap <leader>8 <Plug>AirlineSelectTab8"), String("  nmap <leader>9 <Plug>AirlineSelectTab9"), String("\"}}}"), String("call dein#add(\'tpope/vim-surround\')"), String("call dein#add(\'tpope/vim-repeat\')"), String("call dein#add(\'tpope/vim-unimpaired\') \"{{{"), String("  nmap <c-up> [e"), String("  nmap <c-down> ]e"), String("  vmap <c-up> [egv"), String("  vmap <c-down> ]egv"), String("\"}}}"), String("\" call dein#add(\'qpkorr/vim-bufkill\')"), String("call dein#add(\'mhinz/vim-startify\') \"{{{"), String("  let g:startify_session_dir = s:get_cache_dir(\'sessions\')"), String("  let g:startify_change_to_vcs_root = 1"), String("  let g:startify_show_sessions = 1"), String("  let g:startify_session_before_save = ["), String("      \\ \'tabdo NERDTreeClose\'"), String("      \\ ]"), String("  let g:startify_disable_at_vimenter = 1"), String(""), String("  \" enter last opened file if session was saved"), String("  autocmd VimEnter * nested"), String("    \\   if !argc()"), String("    \\ |   silent! execute \":SLoad \" . fnamemodify(getcwd(), \':t\')"), String("    \\ |   redraw!"), String("    \\ | endif"), String(""), String("  nnoremap <F1> :Startify<cr>"), String("  nnoremap <leader>S :SSave <C-R>=fnamemodify(getcwd(), \':t\')<cr><cr>"), String("\"}}}"), String("call dein#add(\'neomake/neomake\') \" {{{"), String("  autocmd! BufWritePost * Neomake"), String("  let g:neomake_open_list = 0"), String("  \" let g:neomake_verbose = 3"), String(""), String("  let g:neomake_ruby_enabled_makers = [\'rubocop\']"), String("  let g:neomake_typescript_enabled_makers = [\'tslint\']"), String("  \" let g:neomake_typescript_tslint_args = [\'--fix\']"), String(""), String("  \" flow fix"), String("  \" call dein#add(\'benjie/neomake-local-eslint.vim\')"), String("\" }}}"), String("call dein#add(\'zhaocai/GoldenView.Vim\', {\'on_map\':[\'<Plug>ToggleGoldenViewAutoResize\']}) \"{{{"), String("  let g:goldenview__enable_default_mapping=0"), String("\"}}}"), String("call dein#add(\'jszakmeister/vim-togglecursor\')"), String(""), String("\" search with autocenter and autohide {{{"), String("  call dein#add(\'haya14busa/is.vim\')"), String("  let g:is#do_default_mappings = 1"), String(""), String("  call dein#add(\'haya14busa/vim-asterisk\')"), String("  let g:asterisk#keeppos = 1"), String(""), String("  map n <Plug>(is-n)zz"), String("  map N <Plug>(is-N)zz"), String("  map *  <Plug>(asterisk-z*)zz<Plug>(is-nohl-1)"), String("  map g* <Plug>(asterisk-gz*)zz<Plug>(is-nohl-1)"), String("  \" using comment on this"), String("  \" map #  <Plug>(asterisk-z#)zz<Plug>(is-nohl-1)"), String("  \" map g# <Plug>(asterisk-gz#)zz<Plug>(is-nohl-1)"), String("\" }}}"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Git"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'airblade/vim-gitgutter\') \" {{{"), String("  nmap ]h <Plug>GitGutterNextHunk"), String("  nmap [h <Plug>GitGutterPrevHunk"), String("\" }}}"), String("call dein#add(\'tpope/vim-fugitive\') \"{{{"), String("  nnoremap <silent> <leader>ga :Git add --all<CR>"), String("  nnoremap <silent> <leader>gs :Gstatus<CR>"), String("  nnoremap <silent> <leader>gd :Gdiff<CR>"), String("  nnoremap <silent> <leader>gc :Gcommit<CR>"), String("  nnoremap <silent> <leader>gb :Gblame<CR>"), String("  nnoremap <silent> <leader>gl :Glog<CR>"), String("  nnoremap <silent> <leader>gp :Git push<CR>"), String("  nnoremap <silent> <leader>gw :Gwrite<CR>"), String("  nnoremap <silent> <leader>gr :Gremove<CR>"), String("  autocmd BufReadPost fugitive://* set bufhidden=delete"), String("\"}}}"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Autocomplete"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'Shougo/neosnippet-snippets\')"), String("call dein#add(\'Shougo/neosnippet\') \" {{{"), String("  set conceallevel=2 concealcursor=niv"), String("  let g:neosnippet#snippets_directory=\'~/.config/nvim/snippets\'"), String(""), String("  imap <C-k> <Plug>(neosnippet_expand_or_jump)"), String("  smap <C-k> <Plug>(neosnippet_expand_or_jump)"), String("  xmap <C-k> <Plug>(neosnippet_expand_target)"), String(""), String("  inoremap <expr><TAB>"), String("    \\ pumvisible() ? \"\\<C-n>\" :"), String("    \\ neosnippet#expandable_or_jumpable() ?"), String("    \\    \"\\<Plug>(neosnippet_expand_or_jump)\" : \"\\<TAB>\""), String("  snoremap <expr><TAB> neosnippet#expandable_or_jumpable() ?"), String("    \\ \"\\<Plug>(neosnippet_expand_or_jump)\" : \"\\<TAB>\""), String(""), String("\" }}}"), String(""), String("call dein#add(\'Shougo/deoplete.nvim\') \" {{{"), String("  let g:deoplete#enable_at_startup = 1"), String("  let g:deoplete#auto_complete_delay = 150"), String(""), String("  \" initialize with empty, to use it later on per language"), String("  let g:deoplete#omni#input_patterns = {}"), String(""), String("  \" set completeopt=longest,menuone,preview"), String("  \"Amount of entries in completion popup"), String("\" }}}"), String("call dein#add(\'Shougo/echodoc.vim\') \" {{{"), String("  set cmdheight=2"), String("  let g:echodoc_enable_at_startup = 1"), String("\" }}}"), String("\" \" call dein#add(\'thalesmello/webcomplete.vim\')"), String(""), String("call dein#add(\'autozimu/LanguageClient-neovim\', {"), String("    \\ \'rev\': \'next\',"), String("    \\ \'build\': \'./install.sh\',"), String("    \\ })"), String(""), String("let g:LanguageClient_serverCommands = {"), String("    \\ \'javascript\': [\'javascript-typescript-stdio\'],"), String("    \\ \'typescript\': [\'javascript-typescript-stdio\'],"), String("    \\ \'haskell\': [\'hie\', \'--lsp\'],"), String("    \\ \'nix\': [\'nix-lsp\'],"), String("    \\ }"), String(""), String("\" let g:LanguageClient_devel = 1 \" Use rust debug build"), String("let g:LanguageClient_loggingLevel = \'DEBUG\' \" Use highest logging level"), String("\" let g:LanguageClient_loggingFile = \'nvim.log\' \" Use highest logging level"), String("\" let g:LanguageClient_serverStderr = \'language-server.log\' \" Use highest logging level"), String(""), String("\" Automatically start language servers."), String("let g:LanguageClient_autoStart = 1"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Tmux"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'christoomey/vim-tmux-navigator\')"), String(""), String("if $TMUX != \'\'"), String("  call dein#add(\'tmux-plugins/vim-tmux\')"), String("  call dein#add(\'wellle/tmux-complete.vim\')"), String("  call dein#add(\'benmills/vimux\') \" {{{"), String("    let g:VimuxRunnerType = \"window\""), String("    let g:VimuxUseNearest = 0"), String(""), String("    nnoremap <leader>tt :VimuxTogglePane<CR>"), String("    nnoremap <leader>to :call VimuxOpenRunner()<CR>"), String("    nnoremap <Leader>tl :VimuxRunLastCommand<CR>"), String("    nnoremap <Leader>tr ::call VimuxRunCommand(\"yr run && cat output/pipePFn.d.ts\")<CR>"), String("  \" }}}"), String(""), String("  \" tmux status line"), String("  autocmd VimEnter * silent! !tmux source ~/.dotfiles/tmux/themes/jellybeans_tmuxline"), String("  autocmd VimLeave * silent! !tmux source ~/.dotfiles/tmux/themes/iceberg_tmuxline"), String(""), String("  \" call dein#add(\'edkolev/tmuxline.vim\') \" {{{"), String("  \"   let g:tmuxline_theme = \'jellybeans\'"), String("  \"   let g:tmuxline_preset = \'minimal\'"), String("  \" \" }}}"), String("endif"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Editing"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'editorconfig/editorconfig-vim\', {\'on_i\':1})"), String("call dein#add(\'tpope/vim-endwise\')"), String("call dein#add(\'tpope/vim-speeddating\')"), String("call dein#add(\'thinca/vim-visualstar\')"), String(""), String("function s:on_commentary_source()"), String("  xmap # gc"), String("  omap # gc"), String("  nmap # gcc"), String("endfunction"), String("call dein#add(\'tpope/vim-commentary\', {\'hook_post_source\': function(\'s:on_commentary_source\')})"), String(""), String("call dein#add(\'terryma/vim-expand-region\') \" mapping - + and _"), String("call dein#add(\'chrisbra/NrrwRgn\') \" mapping - ,nr"), String("call dein#add(\'jiangmiao/auto-pairs\') \"{{{"), String("  let g:AutoPairsShortcutToggle = \'\'"), String("  let g:AutoPairsMapCh = 0 \" I use `move to left pane` here"), String("  let g:AutoPairsFlyMode = 0"), String("  let g:AutoPairsShortcutBackInsert = \'\'"), String("  let g:AutoPairsMultilineClose = 0"), String("\"}}}"), String("call dein#add(\'justinmk/vim-sneak\') \"{{{"), String("  let g:sneak#streak = 1"), String("\"}}}"), String("call dein#add(\'tommcdo/vim-exchange\')"), String("call dein#add(\'junegunn/vim-easy-align\') \" {{{"), String("  xmap ga <Plug>(EasyAlign)"), String("  nmap ga <Plug>(EasyAlign)"), String("\" }}}"), String("call dein#add(\'bkad/CamelCaseMotion\') \" {{{"), String("  map <silent> w <Plug>CamelCaseMotion_w"), String("  map <silent> b <Plug>CamelCaseMotion_b"), String("  map <silent> e <Plug>CamelCaseMotion_e"), String("  map <silent> ge <Plug>CamelCaseMotion_ge"), String("  sunmap w"), String("  sunmap b"), String("  sunmap e"), String("  sunmap ge"), String("\" }}}"), String("call dein#add(\'jeetsukumaran/vim-indentwise\')"), String("call dein#add(\'AndrewRadev/splitjoin.vim\') \" {{{"), String("  let g:splitjoin_ruby_hanging_args=0"), String("\" }}}"), String("\" mapping - gJ, gS"), String("call dein#add(\'tpope/vim-abolish\') \" {{{"), String("  \" abolish current highlightment"), String("  nnoremap <leader>a \"+y//e<CR>:%Subvert:::g<left><left><left><C-r>+<right>"), String("  nnoremap <leader>A :%Subvert:::g<left><left><left>"), String("  vmap     <leader>A :Subvert:::g<left><left><left>"), String("\" }}}"), String(""), String("call dein#add(\'itchyny/vim-cursorword\') \" underscore word under cursor"), String("call dein#add(\'AndrewRadev/switch.vim\') \" mapping - gs"), String("call dein#add(\'romgrk/replace.vim\') \" {{{"), String("  let g:replace_register = \'_\'"), String("  nmap R \"+<Plug>ReplaceOperator"), String("  vmap R \"+<Plug>ReplaceOperator"), String(""), String("  nmap X \"+<Plug>ExchangeOperator"), String("  nmap RR cc<C-R>+<esc>"), String("\" }}}"), String(""), String("call dein#add(\'AndrewRadev/deleft.vim\') \" mapping - dh"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Navigation"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\"call dein#add(\'mileszs/ack.vim\') \"{{{"), String("\"  let g:ackprg = \"ag --nogroup --column --smart-case --follow\""), String("\"\"}}}"), String("call dein#add(\'dkprice/vim-easygrep\') \"{{{"), String("  let g:EasyGrepRecursive=1"), String("  let g:EasyGrepAllOptionsInExplorer=1"), String("  let g:EasyGrepCommand=1"), String("  let g:EasyGrepFilesToExclude=\".svn,.git,node_modules\""), String("  nnoremap <leader>vo :GrepOptions<cr>"), String("\"}}}"), String("call dein#add(\'mbbill/undotree\', {\'on_cmd\':\'UndotreeToggle\'}) \"{{{"), String("  let g:undotree_SplitLocation=\'botright\'"), String("  let g:undotree_SetFocusWhenToggle=1"), String("  nnoremap <silent> <F5> :UndotreeToggle<CR>"), String("\"}}}"), String("call dein#add(\'scrooloose/nerdtree\', {\'on_cmd\':[\'NERDTreeToggle\',\'NERDTreeFind\']}) \"{{{"), String("  let NERDTreeShowHidden=1"), String("  let NERDTreeQuitOnOpen=0"), String("  let NERDTreeShowLineNumbers=1"), String("  let NERDTreeChDirMode=0"), String("  let NERDTreeShowBookmarks=1"), String("  let NERDTreeIgnore=[\'\\.git$\',\'\\.hg$\',\'\\node_modules$\',\'\\.pyc$\']"), String("  let NERDTreeBookmarksFile=s:get_cache_dir(\'NERDTreeBookmarks\')"), String(""), String("  \" disable f and F in privilege of find commands"), String("  let g:NERDTreeMapOpenVSplit=\'V\'"), String("  let g:NERDTreeMapToggleFiles=\'\'"), String("  let g:NERDTreeMapToggleFilters=\'\'"), String("  let g:NERDTreeMapHelp=\'<M-/>\'"), String(""), String("  let g:NERDTreeMapQuit=\'Q\'"), String("  nnoremap <F2> :NERDTreeToggle<CR>"), String("  nnoremap <F3> :NERDTreeFind<CR>"), String("\"}}}"), String(""), String("\"call dein#add(\'majutsushi/tagbar\', {\'on_cmd\':\'TagbarToggle\'}) \"{{{"), String("\"  nnoremap <silent> <F9> :TagbarToggle<CR>"), String("\"\"}}}"), String("call dein#add(\'kshenoy/vim-signature\')"), String("call dein#add(\'myusuf3/numbers.vim\') \" {{{"), String("  nnoremap <silent> <F7> :NumbersToggle<cr>"), String("\" }}}"), String(""), String("function s:on_cleverf_source()"), String("  \" kakoune like find"), String("  nmap <M-.> <Plug>(clever-f-repeat-forward)"), String("  xmap <M-.> <Plug>(clever-f-repeat-forward)"), String("  omap <M-.> <Plug>(clever-f-repeat-forward)"), String("  nmap <M->> <Plug>(clever-f-repeat-back)"), String("  xmap <M->> <Plug>(clever-f-repeat-back)"), String("  omap <M->> <Plug>(clever-f-repeat-back)"), String("endfunction"), String("call dein#add(\'rhysd/clever-f.vim\', {\'hook_post_source\': function(\'s:on_cleverf_source\')})"), String("let g:clever_f_timeout_ms = 1 \" make clever_f unclever"), String(""), String("call dein#add(\'mhinz/vim-sayonara\') \" {{{"), String("  let g:sayonara_confirm_quit = 1"), String(""), String("  nnoremap Q :Sayonara<cr>"), String("  nnoremap <M-q> :Sayonara!<cr>"), String(""), String("  nnoremap <leader>q :xa<cr>"), String("  nnoremap <leader>z :qa!<cr>"), String("\" }}}"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Unite"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String(""), String("call dein#add(\'Shougo/denite.nvim\') \" {{{"), String("  call denite#custom#var(\'file_rec\', \'command\', [\'ag\', \'--vimgrep\', \'--hidden\',"), String("    \\ \'--ignore\', \'.hg\',"), String("    \\ \'--ignore\', \'.svn\',"), String("    \\ \'--ignore\', \'.git\',"), String("    \\ \'--ignore\', \'.bzr\',"), String("    \\ \'--ignore\', \'.cache\'])"), String("  call denite#custom#map(\'normal\', \'Q\', \'<denite:quit>\', \'noremap\')"), String("\" }}}"), String("call dein#add(\'Shougo/neomru.vim\')"), String(""), String("nmap <space> [denite]"), String("nnoremap [denite] <nop>"), String(""), String("nnoremap <silent> [denite]l :<C-u>Denite line<cr>"), String("nnoremap <silent> [denite]m :<C-u>Denite file_mru <cr>"), String("nnoremap <silent> [denite]b :<C-u>Denite buffer<cr>"), String("nnoremap <silent> [denite]j :<C-u>JunkfileTodo<cr>"), String("nnoremap [denite]g :<C-u>Grep<space>"), String("\" nnoremap <silent> [denite]y :<C-u>Denite neoyank<cr>"), String(""), String("\" git project nav {{{"), String("  call denite#custom#alias(\'source\', \'file_rec/git\', \'file_rec\')"), String("  call denite#custom#var(\'file_rec/git\', \'command\',"), String("    \\ [\'git\', \'ls-files\', \'-co\', \'--exclude-standard\'])"), String("  nnoremap <silent> [denite]<space> :<C-u>Denite `finddir(\'.git\', \';\') != \'\' ? \'file_rec/git\' : \'file_rec\'`<CR>"), String("\" }}}"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Textobj"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'kana/vim-textobj-user\')"), String("call dein#add(\'kana/vim-textobj-indent\')"), String("call dein#add(\'kana/vim-textobj-entire\')"), String("call dein#add(\'lucapette/vim-textobj-underscore\')"), String("call dein#add(\'beloglazov/vim-textobj-quotes\')"), String("call dein#add(\'kana/vim-textobj-line\')"), String("call dein#add(\'jasonlong/vim-textobj-css\')"), String("call dein#add(\'b4winckler/vim-angry\')"), String("call dein#add(\'saihoooooooo/vim-textobj-space\')"), String(""), String("\" file text object"), String("call textobj#user#plugin(\'file\', {"), String("  \\ \'file\': {"), String("  \\ \'pattern\': \'\\f\\+\', \'select\': [\'af\', \'if\']"), String("  \\ }"), String("  \\ })"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Web"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'groenewege/vim-less\', {\'on_ft\':[\'less\']})"), String("call dein#add(\'cakebaker/scss-syntax.vim\', {\'on_ft\':[\'scss\',\'sass\']})"), String("call dein#add(\'hail2u/vim-css3-syntax\', {\'on_ft\':[\'css\',\'scss\',\'sass\']})"), String("call dein#add(\'othree/html5.vim\', {\'on_ft\':[\'html\',\'typescript\']})"), String("call dein#add(\'digitaltoad/vim-pug\', {\'on_ft\':[\'pug\', \'vue\']})"), String("call dein#add(\'mustache/vim-mustache-handlebars\', {\'on_ft\':[\'mustache\',\'handlebars\']})"), String("call dein#add(\'Valloric/MatchTagAlways\')"), String("call dein#add(\'slim-template/vim-slim\', {\'on_ft\':[\'slim\']})"), String("call dein#add(\'mattn/emmet-vim\', {\'on_ft\':[\'html\',\'vue\',\'xml\',\'xsl\',\'xslt\',\'xsd\',\'css\',\'sass\',\'scss\',\'less\',\'mustache\',\'handlebars\',\'ts\',\'javascript\',\'jsx\',\'typescript\',\'eruby\']})"), String("autocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby imap <buffer><c-y><c-y> <c-y>,"), String("autocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby vmap <buffer><c-y><c-y> <c-y>,"), String(""), String("\" TextField to <TextField />"), String("autocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby imap <buffer><c-y>y <esc>ysiw>f>i<space>/<c-o>h"), String(""), String("\" Attribute deletion"), String("autocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby nm dA lF d2f\""), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Javascript"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'othree/yajs.vim\')"), String("call dein#add(\'kchmck/vim-coffee-script\', {\'on_ft\':[\'coffee\']})"), String("call dein#add(\'mmalecki/vim-node.js\', {\'on_ft\':[\'javascript\']})"), String("call dein#add(\'leshill/vim-json\', {\'on_ft\':[\'javascript\',\'json\']})"), String("call dein#add(\'othree/javascript-libraries-syntax.vim\', {\'on_ft\':[\'javascript\',\'coffee\',\'ls\',\'typescript\']})"), String("call dein#add(\'heavenshell/vim-jsdoc\', {\'on_ft\':[\'javascript\',\'typescript\']})"), String(""), String("let g:used_javascript_libs = \'underscore,ramda,react\'"), String(""), String("\" typescript"), String("\" call dein#add(\'mhartington/nvim-typescript\', { \'on_ft\':[\'typescript\'] })"), String("call dein#add(\'leafgarland/typescript-vim\', { \'on_ft\':[\'typescript\'] })"), String(""), String("\" flow"), String("\" call dein#add(\'flowtype/vim-flow\', { \'on_ft\':[\'javascript\'] })"), String(""), String("\" vue"), String("\" call dein#add(\'posva/vim-vue\')"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Ruby"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'tpope/vim-rails\', {\'on_ft\':[\'ruby\']})"), String("call dein#add(\'rhysd/vim-textobj-ruby\', {\'on_ft\':[\'ruby\']})"), String("call dein#add(\'fishbullet/deoplete-ruby\', {\'on_ft\':[\'ruby\']})"), String("\" call dein#add(\'thoughtbot/vim-rspec\', {\'on_ft\':[\'ruby\']})"), String(""), String("let neosimpp_path = \'~/.config/nvim/bundle/repos/github.com/Shougo/neosnippet-snippets/neosnippets/\'"), String("exec \"au BufNewFile,BufRead Gemfile NeoSnippetSource \".neosimpp_path.\"Gemfile.snip\""), String("exec \"au BufNewFile,BufRead *.rb NeoSnippetSource \".neosimpp_path.\"rails.snip\""), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Elm"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" call dein#add(\'ElmCast/elm-vim\') \" {{{"), String("\"   let g:elm_format_autosave = 1"), String("\"   let g:elm_setup_keybindings = 0 \" use bindings from ftplugin/elm.vim"), String(""), String("\"   let g:syntastic_always_populate_loc_list = 1"), String("\"   let g:syntastic_auto_loc_list = 1"), String("\"   let g:elm_syntastic_show_warnings = 1"), String(""), String("\"   \" let g:deoplete#omni#functions.elm = [\'elm#Complete\']"), String("\"   \" let g:deoplete#omni#input_patterns.elm = \'[^ \\t]+\'"), String("\"   \" let g:deoplete#sources.elm = [\'omni\'] + g:deoplete#sources._"), String("\" \" }}}"), String("\" call dein#add(\'pbogut/deoplete-elm\')"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Idris"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" call dein#add(\'idris-hackers/idris-vim\')"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Python"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" call dein#add(\'hdima/python-syntax\')"), String("\" let python_highlight_all = 1"), String("\" let python_version_2 = 1"), String(""), String("call dein#add(\'vim-python/python-syntax\')"), String("let g:python_highlight_all = 1"), String("let g:python_version_2 = 1"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Haskell"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'neovimhaskell/haskell-vim\', { \'on_ft\':[\'haskell\'] })"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => C#"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" call dein#add(\'Robzz/deoplete-omnisharp\', { \'on_ft\':[\'cs\'] })"), String("\" call dein#add(\'OmniSharp/omnisharp-vim\', { \'on_ft\':[\'cs\'] })"), String("\" let g:deoplete#omni#functions = {}"), String("\" let g:deoplete#omni#functions.cs = \'OmniSharp#Complete\'"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Purescript"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" call dein#add(\'purescript-contrib/purescript-vim\', { \'on_ft\':[\'purescript\'] })"), String("\" call dein#add(\'FrigoEU/psc-ide-vim\', { \'on_ft\':[\'purescript\'] })"), String("\" let g:psc_ide_log_level=4"), String(""), String("\" checking in file"), String("\" let g:deoplete#omni#input_patterns.purescript = \'[^. *\\t]\'"), String("\" let g:deoplete#omni#input_patterns.purescript = \'[.\\w]+\'"), String("\" checking wia `pulp -w build` (faster)"), String("\" let g:psc_ide_syntastic_mode = 0"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Misc"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" call dein#add(\'kana/vim-vspec\') \" Testing framework"), String("call dein#add(\'jparise/vim-graphql\', {\'on_ft\':[\'graphql\']})"), String("call dein#add(\'tpope/vim-scriptease\', {\'on_ft\':[\'vim\']})"), String("call dein#add(\'tpope/vim-markdown\',{\'on_ft\':[\'markdown\']})"), String("call dein#add(\'PotatoesMaster/i3-vim-syntax\',{\'on_ft\':[\'i3\']})"), String("call dein#add(\'chr4/nginx.vim\',{\'on_ft\':[\'nginx\']})"), String("call dein#add(\'vim-scripts/vim-terraform\',{\'on_ft\':[\'terraform\']})"), String("call dein#add(\'LnL7/vim-nix\', { \'on_ft\':[\'nix\'] })"), String(""), String("\" call dein#add(\'takac/vim-hardtime\') \" {{{"), String("\"   let g:hardtime_default_on = 1"), String("\"   let g:hardtime_allow_different_key = 1"), String("\"   let g:hardtime_maxcount = 2"), String(""), String("\"   \" doesnt work with wb actually"), String("\"   let s:hardtime_abandoned_keys = [\"h\", \"j\", \"k\", \"l\", \"-\", \"+\", \"W\", \"B\"]"), String("\"   let g:list_of_normal_keys = s:hardtime_abandoned_keys"), String("\"   let g:list_of_visual_keys = s:hardtime_abandoned_keys"), String(""), String("\"   \" let g:hardtime_ignore_buffer_patterns = [\".*fugitive.*\", \"[unite].*\"]"), String("\" \" }}}"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Documets editing"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" call dein#add(\'maksimr/vim-translator\')"), String("\" call dein#add(\'suan/vim-instant-markdown\')"), String(""), String("\" autocmd InsertEnter * silent! !xkbcomp $HOME/.config/layouts/ua $DISPLAY  > /dev/null 2&>1"), String("\" autocmd InsertLeave * silent! !xkbcomp $HOME/.config/layouts/en_ru $DISPLAY > /dev/null 2&>1"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => GUI"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" call dein#add(\'tpope/vim-dispatch\') \" {{{"), String("\"   \" call dein#add(\'radenling/vim-dispatch-neovim\')"), String("\"   nnoremap <leader>rd :Dispatch<space>"), String("\"   nnoremap <leader>rD :Copen<CR>"), String(""), String("\"   \" open file under cursor in window above"), String("\"   nmap <leader>gf yif<C-k>:e <M-p><CR>"), String("\" }}}"), String("\" call dein#add(\'bramblex/ranger.vim\', { \'depends\': \'rbgrouleff/bclose.vim\' }) \" {{{"), String("\"   let g:ranger_path=\'SHELL=/home/srghma/.config/ranger/rshell ranger --cmd \"set colorscheme snow\"\'"), String("\" \" }}}"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Mappings"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("nnoremap <M-8> #"), String(""), String("nnoremap <leader>w :w<cr>"), String("nnoremap <leader>tag :!ctags -R .<cr>"), String(""), String("\" toggle paste"), String("nnoremap <F6> :set invpaste<CR>:set paste?<CR>"), String(""), String("\" remap arrow keys"), String("nnoremap <left> :bprev<CR>"), String("nnoremap <right> :bnext<CR>"), String("nnoremap <up> :tabnext<CR>"), String("nnoremap <down> :tabprev<CR>"), String(""), String("\" unimpaired tabs"), String("nnoremap ]w :tabnext<CR>"), String("nnoremap [w :tabprev<CR>"), String(""), String("\" quick resizing"), String("nnoremap <M-h> <C-w>3<"), String("nnoremap <M-l> <C-w>3>"), String("nnoremap <M-j> <C-w>3-"), String("nnoremap <M-k> <C-w>3+"), String(""), String("\" change cursor position in command mode"), String("cnoremap <M-h> <left>"), String("cnoremap <M-l> <right>"), String("cnoremap <M-j> <down>"), String("cnoremap <M-k> <up>"), String(""), String("\" will be rewritten if tmux run"), String("nnoremap <C-h> <C-w>h"), String("nnoremap <C-j> <C-w>j"), String("nnoremap <C-k> <C-w>k"), String("nnoremap <C-l> <C-w>l"), String(""), String("\" kakoune like movements"), String("noremap gh 0"), String("noremap gi ^"), String("noremap gl g_"), String("noremap gj G"), String("noremap gk gg"), String(""), String("inoremap <C-r> <C-r><C-p>"), String("inoremap <M-p> <C-r><C-p>+"), String("cnoremap <M-p> <C-r>+"), String(""), String("nnoremap p \"+p"), String("vnoremap p \"+p"), String("nnoremap <M-p> p"), String("vnoremap <M-p> p"), String(""), String("nnoremap P \"+P"), String("vnoremap P \"+P"), String("nnoremap <M-P> P"), String("vnoremap <M-P> P"), String(""), String("nnoremap y \"+y"), String("vnoremap y \"+y"), String("nnoremap <M-y> y"), String("vnoremap <M-y> y"), String(""), String("nnoremap Y \"+y$"), String("nnoremap <M-Y> y$"), String("vnoremap <M-Y> y$"), String(""), String("nnoremap ,d \"+d"), String("vnoremap ,d \"+d"), String("nnoremap ,D \"+D"), String("vnoremap ,D \"+D"), String(""), String("\" deleting"), String("inoremap <C-u> <C-g>u<C-u>"), String("inoremap <C-d> <Del>"), String(""), String("\" sane regex"), String("nnoremap / /\\v"), String("vnoremap / /\\v"), String("nnoremap ? ?\\v"), String("vnoremap ? ?\\v"), String("\" nnoremap :s/ :s/\\v"), String(""), String("\" quick substitute"), String("nnoremap dm :%s:::g<left><left><left>"), String("vnoremap dm :s:::g<left><left><left>"), String(""), String("\" command-line window"), String("nnoremap q: q:i"), String("nnoremap q/ q/i"), String("nnoremap q? q?i"), String(""), String("\" folds"), String("nnoremap zr zr:echo &foldlevel<cr>"), String("nnoremap zm zm:echo &foldlevel<cr>"), String("nnoremap zR zR:echo &foldlevel<cr>"), String("nnoremap zM zM:echo &foldlevel<cr>"), String(""), String("\" screen line scroll"), String("nnoremap <expr> j v:count > 1 ? \"j\" : \"gj\""), String("nnoremap <expr> k v:count > 1 ? \"k\" : \"gk\""), String(""), String("\" auto center"), String("nnoremap <silent> <C-o> <C-o>zz"), String("nnoremap <silent> <C-i> <C-i>zz"), String(""), String("\" reselect visual block after indent"), String("vnoremap < <gv"), String("vnoremap > >gv"), String(""), String("\" reselect last paste"), String("nnoremap <expr> gp \'`[\' . strpart(getregtype(), 0, 1) . \'`]\'"), String(""), String("\" shortcuts for windows"), String("nnoremap <leader>v <C-w>v<C-w>l"), String("nnoremap <leader>s <C-w>s"), String("nnoremap <leader>vsa :vert sba<cr>"), String(""), String("\" tab shortcuts"), String("nnoremap <leader>tn :tab spl<CR>"), String("nnoremap <leader>tc :tabclose<CR>"), String(""), String("\" quick buffer open"), String("nnoremap gb :ls<cr>:e #"), String(""), String("\" general"), String("nnoremap <leader>l :set list! list?<cr>"), String("nnoremap <bs> :noh<cr>"), String("nnoremap <M-v> vg_"), String(""), String("nnoremap <C-s> <C-a>"), String("nnoremap <leader>R :so $MYVIMRC<CR>"), String(""), String("\" in nvim terminal emulator"), String("tnoremap <C-\\><C-\\> <C-\\><C-n>"), String("tnoremap <left> <C-\\><C-n>:bprev<CR>"), String("tnoremap <right> <C-\\><C-n>:bnext<CR>"), String("tnoremap <up> <C-\\><C-n>:tabnext<CR>"), String("tnoremap <down> <C-\\><C-n>:tabprev<CR>"), String(""), String("\" J and K like in nerdtree"), String("map K <Plug>(IndentWiseBlockScopeBoundaryBegin)"), String("map J <Plug>(IndentWiseBlockScopeBoundaryEnd)"), String(""), String("nnoremap <M-i> J"), String(""), String("function! RemoveNonascii() abort"), String("  exe \"normal! :s:\\ \\|(\\|)\\|\\.::g\""), String("endfunction"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Finish"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("call dein#add(\'nanotech/jellybeans.vim\')"), String("call dein#add(\'ryanoasis/vim-devicons\')"), String(""), String("call dein#end()"), String(""), String("if dein#check_install()"), String("  call dein#install()"), String("endif"), String(""), String("autocmd VimEnter * call dein#call_hook(\'post_source\')"), String(""), String("filetype plugin indent on"), String("syntax enable"), String("colorscheme jellybeans"), String(""), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" => Autocommands"), String("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""), String("\" go back to previous position of cursor if any"), String("autocmd BufReadPost *"), String("  \\ if line(\"\'\\\"\") > 0 && line(\"\'\\\"\") <= line(\"$\") |"), String("  \\  exe \'normal! g`\"zvzz\' |"), String("  \\ endif"), String(""), String("\" autosave"), String("autocmd FocusLost * silent! wall"), String("set autowriteall"), String(""), String("autocmd BufRead,BufNewFile *.conf setf dosini"), String(""), String("autocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}"), String("autocmd FileType python setlocal foldmethod=indent"), String("autocmd FileType markdown setlocal nolist"), String("autocmd FileType yaml,eruby.yaml setlocal tabstop=2 shiftwidth=2 commentstring=#\\ %s"), String("\" autocmd FileType typescript setlocal tabstop=2 shiftwidth=2 expandtab"), String(""), String("\" force filetype on odd extension"), String("au BufRead,BufNewFile Dockerfile.template set filetype=dockerfile"), String("au BufRead,BufNewFile *.js.erb set filetype=javascript"), String("au BufRead,BufNewFile *.mjml set filetype=slim"), String("au BufRead,BufNewFile Vagrantfile,Guardfile set filetype=ruby"), String(""), String("\" autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 expandtab"), String("\" autocmd FileType html,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=0 copyindent preserveindent noexpandtab"), String(""), String("\" nmap g[ 0ciw1<ESC>"), String("\" nmap g] 0kyiwjciw<M-p><ESC>"), String("")])]
17:40:46 DEBUG main src/vim.rs:329 state.text_documents./home/srghma/.dotfiles/nvim/init.vim: null ==> {"languageId":"vim","text":"\" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0\n\" original from https://github.com/bling/dotvim\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Initialize defaults\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" setup & dein {{{\n  set rtp+=~/.config/nvim/bundle/repos/github.com/Shougo/dein.vim\n  call dein#begin(expand('~/.config/nvim/bundle/'))\n  call dein#add('Shougo/dein.vim')\n\"}}}\n\nlet s:cache_dir = '~/.config/nvim/.cache'\nlet s:settings = {}\nlet s:settings.default_indent = 2\nlet s:settings.max_column = 120\n\n\" helper functions\nfunction! s:get_cache_dir(suffix) \"{{{\n  return resolve(expand(s:cache_dir . '/' . a:suffix))\nendfunction \"}}}\n\nfunction! EnsureExists(path) \"{{{\n  if !isdirectory(expand(a:path))\n    call mkdir(expand(a:path))\n  endif\nendfunction \"}}}\n\n\" swap files\nlet &directory = s:get_cache_dir('swap')\nset noswapfile\n\ncall EnsureExists(s:cache_dir)\ncall EnsureExists(&directory)\n\nif !executable('ag')\n  echoerr('You must install silver searcher')\nendif\n\n\" base configuration\nset showfulltag\nset shell=/bin/sh\nset noshelltemp                                     \"use pipes\nset clipboard=unnamed\nset inccommand=nosplit\nset undofile\n\" set paste\n\n\" whitespace\nset expandtab                                       \"spaces instead of tabs\nlet &tabstop=s:settings.default_indent              \"number of spaces per tab for display\nlet &softtabstop=s:settings.default_indent          \"number of spaces per tab in insert mode\nlet &shiftwidth=s:settings.default_indent           \"number of spaces when indenting\nset list                                            \"highlight whitespace\nset listchars=tab:│\\ ,trail:•,extends:❯,precedes:❮,space:·\nset shiftround\nset linebreak\nlet &showbreak='↪ '\n\nset wildmode=list:full\nset wildignorecase\n\nset splitbelow\nset splitright\n\n\" searching\nset ignorecase                                      \"ignore case for searching\nset smartcase                                       \"do case-sensitive if there's a capital letter\nset grepprg=ag\\ --nogroup\\ --column\\ --smart-case\\ --nocolor\\ --follow\nset grepformat=%f:%l:%c:%m\n\nlet mapleader = \",\"\nlet g:mapleader = \",\"\nlet maplocalleader = \"\\\\\"\n\n\" ui configuration\nset showmatch                                       \"automatically highlight matching braces/brackets/etc.\nset matchtime=2                                     \"tens of a second to show matching parentheses\nset number\nset lazyredraw\nset noshowmode\nset foldmethod=syntax                               \"fold via syntax of files\nset foldlevelstart=99                               \"open all folds by default\nlet g:xml_syntax_folding=1                          \"enable xml folding\nset completeopt-=preview\n\nset cursorline\nautocmd WinLeave * setlocal nocursorline\nautocmd WinEnter * setlocal cursorline\nlet &colorcolumn=s:settings.max_column\n\n\" set hidden\n\n\" shared helper\nfunction! Preserve(command) \"{{{\n  \" preparation: save last search, and cursor position.\n  let _s=@/\n  let l = line(\".\")\n  let c = col(\".\")\n  \" do the business:\n  execute a:command\n  \" clean up: restore previous search history, and cursor position\n  let @/=_s\n  call cursor(l, c)\nendfunction \"}}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Core\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('vim-scripts/matchit.zip')\ncall dein#add('vim-airline/vim-airline') \"{{{\n  let g:airline_powerline_fonts = 1\n  let g:airline#extensions#tabline#enabled = 1\n  let g:airline#extensions#tabline#left_sep = ' '\n  let g:airline#extensions#tabline#left_alt_sep = '¦'\n  let g:airline#extensions#tabline#buffer_idx_mode = 1\n  let g:airline#extensions#syntastic#enabled = 1\n  nmap <leader>1 <Plug>AirlineSelectTab1\n  nmap <leader>2 <Plug>AirlineSelectTab2\n  nmap <leader>3 <Plug>AirlineSelectTab3\n  nmap <leader>4 <Plug>AirlineSelectTab4\n  nmap <leader>5 <Plug>AirlineSelectTab5\n  nmap <leader>6 <Plug>AirlineSelectTab6\n  nmap <leader>7 <Plug>AirlineSelectTab7\n  nmap <leader>8 <Plug>AirlineSelectTab8\n  nmap <leader>9 <Plug>AirlineSelectTab9\n\"}}}\ncall dein#add('tpope/vim-surround')\ncall dein#add('tpope/vim-repeat')\ncall dein#add('tpope/vim-unimpaired') \"{{{\n  nmap <c-up> [e\n  nmap <c-down> ]e\n  vmap <c-up> [egv\n  vmap <c-down> ]egv\n\"}}}\n\" call dein#add('qpkorr/vim-bufkill')\ncall dein#add('mhinz/vim-startify') \"{{{\n  let g:startify_session_dir = s:get_cache_dir('sessions')\n  let g:startify_change_to_vcs_root = 1\n  let g:startify_show_sessions = 1\n  let g:startify_session_before_save = [\n      \\ 'tabdo NERDTreeClose'\n      \\ ]\n  let g:startify_disable_at_vimenter = 1\n\n  \" enter last opened file if session was saved\n  autocmd VimEnter * nested\n    \\   if !argc()\n    \\ |   silent! execute \":SLoad \" . fnamemodify(getcwd(), ':t')\n    \\ |   redraw!\n    \\ | endif\n\n  nnoremap <F1> :Startify<cr>\n  nnoremap <leader>S :SSave <C-R>=fnamemodify(getcwd(), ':t')<cr><cr>\n\"}}}\ncall dein#add('neomake/neomake') \" {{{\n  autocmd! BufWritePost * Neomake\n  let g:neomake_open_list = 0\n  \" let g:neomake_verbose = 3\n\n  let g:neomake_ruby_enabled_makers = ['rubocop']\n  let g:neomake_typescript_enabled_makers = ['tslint']\n  \" let g:neomake_typescript_tslint_args = ['--fix']\n\n  \" flow fix\n  \" call dein#add('benjie/neomake-local-eslint.vim')\n\" }}}\ncall dein#add('zhaocai/GoldenView.Vim', {'on_map':['<Plug>ToggleGoldenViewAutoResize']}) \"{{{\n  let g:goldenview__enable_default_mapping=0\n\"}}}\ncall dein#add('jszakmeister/vim-togglecursor')\n\n\" search with autocenter and autohide {{{\n  call dein#add('haya14busa/is.vim')\n  let g:is#do_default_mappings = 1\n\n  call dein#add('haya14busa/vim-asterisk')\n  let g:asterisk#keeppos = 1\n\n  map n <Plug>(is-n)zz\n  map N <Plug>(is-N)zz\n  map *  <Plug>(asterisk-z*)zz<Plug>(is-nohl-1)\n  map g* <Plug>(asterisk-gz*)zz<Plug>(is-nohl-1)\n  \" using comment on this\n  \" map #  <Plug>(asterisk-z#)zz<Plug>(is-nohl-1)\n  \" map g# <Plug>(asterisk-gz#)zz<Plug>(is-nohl-1)\n\" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Git\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('airblade/vim-gitgutter') \" {{{\n  nmap ]h <Plug>GitGutterNextHunk\n  nmap [h <Plug>GitGutterPrevHunk\n\" }}}\ncall dein#add('tpope/vim-fugitive') \"{{{\n  nnoremap <silent> <leader>ga :Git add --all<CR>\n  nnoremap <silent> <leader>gs :Gstatus<CR>\n  nnoremap <silent> <leader>gd :Gdiff<CR>\n  nnoremap <silent> <leader>gc :Gcommit<CR>\n  nnoremap <silent> <leader>gb :Gblame<CR>\n  nnoremap <silent> <leader>gl :Glog<CR>\n  nnoremap <silent> <leader>gp :Git push<CR>\n  nnoremap <silent> <leader>gw :Gwrite<CR>\n  nnoremap <silent> <leader>gr :Gremove<CR>\n  autocmd BufReadPost fugitive://* set bufhidden=delete\n\"}}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Autocomplete\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('Shougo/neosnippet-snippets')\ncall dein#add('Shougo/neosnippet') \" {{{\n  set conceallevel=2 concealcursor=niv\n  let g:neosnippet#snippets_directory='~/.config/nvim/snippets'\n\n  imap <C-k> <Plug>(neosnippet_expand_or_jump)\n  smap <C-k> <Plug>(neosnippet_expand_or_jump)\n  xmap <C-k> <Plug>(neosnippet_expand_target)\n\n  inoremap <expr><TAB>\n    \\ pumvisible() ? \"\\<C-n>\" :\n    \\ neosnippet#expandable_or_jumpable() ?\n    \\    \"\\<Plug>(neosnippet_expand_or_jump)\" : \"\\<TAB>\"\n  snoremap <expr><TAB> neosnippet#expandable_or_jumpable() ?\n    \\ \"\\<Plug>(neosnippet_expand_or_jump)\" : \"\\<TAB>\"\n\n\" }}}\n\ncall dein#add('Shougo/deoplete.nvim') \" {{{\n  let g:deoplete#enable_at_startup = 1\n  let g:deoplete#auto_complete_delay = 150\n\n  \" initialize with empty, to use it later on per language\n  let g:deoplete#omni#input_patterns = {}\n\n  \" set completeopt=longest,menuone,preview\n  \"Amount of entries in completion popup\n\" }}}\ncall dein#add('Shougo/echodoc.vim') \" {{{\n  set cmdheight=2\n  let g:echodoc_enable_at_startup = 1\n\" }}}\n\" \" call dein#add('thalesmello/webcomplete.vim')\n\ncall dein#add('autozimu/LanguageClient-neovim', {\n    \\ 'rev': 'next',\n    \\ 'build': './install.sh',\n    \\ })\n\nlet g:LanguageClient_serverCommands = {\n    \\ 'javascript': ['javascript-typescript-stdio'],\n    \\ 'typescript': ['javascript-typescript-stdio'],\n    \\ 'haskell': ['hie', '--lsp'],\n    \\ 'nix': ['nix-lsp'],\n    \\ }\n\n\" let g:LanguageClient_devel = 1 \" Use rust debug build\nlet g:LanguageClient_loggingLevel = 'DEBUG' \" Use highest logging level\n\" let g:LanguageClient_loggingFile = 'nvim.log' \" Use highest logging level\n\" let g:LanguageClient_serverStderr = 'language-server.log' \" Use highest logging level\n\n\" Automatically start language servers.\nlet g:LanguageClient_autoStart = 1\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Tmux\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('christoomey/vim-tmux-navigator')\n\nif $TMUX != ''\n  call dein#add('tmux-plugins/vim-tmux')\n  call dein#add('wellle/tmux-complete.vim')\n  call dein#add('benmills/vimux') \" {{{\n    let g:VimuxRunnerType = \"window\"\n    let g:VimuxUseNearest = 0\n\n    nnoremap <leader>tt :VimuxTogglePane<CR>\n    nnoremap <leader>to :call VimuxOpenRunner()<CR>\n    nnoremap <Leader>tl :VimuxRunLastCommand<CR>\n    nnoremap <Leader>tr ::call VimuxRunCommand(\"yr run && cat output/pipePFn.d.ts\")<CR>\n  \" }}}\n\n  \" tmux status line\n  autocmd VimEnter * silent! !tmux source ~/.dotfiles/tmux/themes/jellybeans_tmuxline\n  autocmd VimLeave * silent! !tmux source ~/.dotfiles/tmux/themes/iceberg_tmuxline\n\n  \" call dein#add('edkolev/tmuxline.vim') \" {{{\n  \"   let g:tmuxline_theme = 'jellybeans'\n  \"   let g:tmuxline_preset = 'minimal'\n  \" \" }}}\nendif\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Editing\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('editorconfig/editorconfig-vim', {'on_i':1})\ncall dein#add('tpope/vim-endwise')\ncall dein#add('tpope/vim-speeddating')\ncall dein#add('thinca/vim-visualstar')\n\nfunction s:on_commentary_source()\n  xmap # gc\n  omap # gc\n  nmap # gcc\nendfunction\ncall dein#add('tpope/vim-commentary', {'hook_post_source': function('s:on_commentary_source')})\n\ncall dein#add('terryma/vim-expand-region') \" mapping - + and _\ncall dein#add('chrisbra/NrrwRgn') \" mapping - ,nr\ncall dein#add('jiangmiao/auto-pairs') \"{{{\n  let g:AutoPairsShortcutToggle = ''\n  let g:AutoPairsMapCh = 0 \" I use `move to left pane` here\n  let g:AutoPairsFlyMode = 0\n  let g:AutoPairsShortcutBackInsert = ''\n  let g:AutoPairsMultilineClose = 0\n\"}}}\ncall dein#add('justinmk/vim-sneak') \"{{{\n  let g:sneak#streak = 1\n\"}}}\ncall dein#add('tommcdo/vim-exchange')\ncall dein#add('junegunn/vim-easy-align') \" {{{\n  xmap ga <Plug>(EasyAlign)\n  nmap ga <Plug>(EasyAlign)\n\" }}}\ncall dein#add('bkad/CamelCaseMotion') \" {{{\n  map <silent> w <Plug>CamelCaseMotion_w\n  map <silent> b <Plug>CamelCaseMotion_b\n  map <silent> e <Plug>CamelCaseMotion_e\n  map <silent> ge <Plug>CamelCaseMotion_ge\n  sunmap w\n  sunmap b\n  sunmap e\n  sunmap ge\n\" }}}\ncall dein#add('jeetsukumaran/vim-indentwise')\ncall dein#add('AndrewRadev/splitjoin.vim') \" {{{\n  let g:splitjoin_ruby_hanging_args=0\n\" }}}\n\" mapping - gJ, gS\ncall dein#add('tpope/vim-abolish') \" {{{\n  \" abolish current highlightment\n  nnoremap <leader>a \"+y//e<CR>:%Subvert:::g<left><left><left><C-r>+<right>\n  nnoremap <leader>A :%Subvert:::g<left><left><left>\n  vmap     <leader>A :Subvert:::g<left><left><left>\n\" }}}\n\ncall dein#add('itchyny/vim-cursorword') \" underscore word under cursor\ncall dein#add('AndrewRadev/switch.vim') \" mapping - gs\ncall dein#add('romgrk/replace.vim') \" {{{\n  let g:replace_register = '_'\n  nmap R \"+<Plug>ReplaceOperator\n  vmap R \"+<Plug>ReplaceOperator\n\n  nmap X \"+<Plug>ExchangeOperator\n  nmap RR cc<C-R>+<esc>\n\" }}}\n\ncall dein#add('AndrewRadev/deleft.vim') \" mapping - dh\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Navigation\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\"call dein#add('mileszs/ack.vim') \"{{{\n\"  let g:ackprg = \"ag --nogroup --column --smart-case --follow\"\n\"\"}}}\ncall dein#add('dkprice/vim-easygrep') \"{{{\n  let g:EasyGrepRecursive=1\n  let g:EasyGrepAllOptionsInExplorer=1\n  let g:EasyGrepCommand=1\n  let g:EasyGrepFilesToExclude=\".svn,.git,node_modules\"\n  nnoremap <leader>vo :GrepOptions<cr>\n\"}}}\ncall dein#add('mbbill/undotree', {'on_cmd':'UndotreeToggle'}) \"{{{\n  let g:undotree_SplitLocation='botright'\n  let g:undotree_SetFocusWhenToggle=1\n  nnoremap <silent> <F5> :UndotreeToggle<CR>\n\"}}}\ncall dein#add('scrooloose/nerdtree', {'on_cmd':['NERDTreeToggle','NERDTreeFind']}) \"{{{\n  let NERDTreeShowHidden=1\n  let NERDTreeQuitOnOpen=0\n  let NERDTreeShowLineNumbers=1\n  let NERDTreeChDirMode=0\n  let NERDTreeShowBookmarks=1\n  let NERDTreeIgnore=['\\.git$','\\.hg$','\\node_modules$','\\.pyc$']\n  let NERDTreeBookmarksFile=s:get_cache_dir('NERDTreeBookmarks')\n\n  \" disable f and F in privilege of find commands\n  let g:NERDTreeMapOpenVSplit='V'\n  let g:NERDTreeMapToggleFiles=''\n  let g:NERDTreeMapToggleFilters=''\n  let g:NERDTreeMapHelp='<M-/>'\n\n  let g:NERDTreeMapQuit='Q'\n  nnoremap <F2> :NERDTreeToggle<CR>\n  nnoremap <F3> :NERDTreeFind<CR>\n\"}}}\n\n\"call dein#add('majutsushi/tagbar', {'on_cmd':'TagbarToggle'}) \"{{{\n\"  nnoremap <silent> <F9> :TagbarToggle<CR>\n\"\"}}}\ncall dein#add('kshenoy/vim-signature')\ncall dein#add('myusuf3/numbers.vim') \" {{{\n  nnoremap <silent> <F7> :NumbersToggle<cr>\n\" }}}\n\nfunction s:on_cleverf_source()\n  \" kakoune like find\n  nmap <M-.> <Plug>(clever-f-repeat-forward)\n  xmap <M-.> <Plug>(clever-f-repeat-forward)\n  omap <M-.> <Plug>(clever-f-repeat-forward)\n  nmap <M->> <Plug>(clever-f-repeat-back)\n  xmap <M->> <Plug>(clever-f-repeat-back)\n  omap <M->> <Plug>(clever-f-repeat-back)\nendfunction\ncall dein#add('rhysd/clever-f.vim', {'hook_post_source': function('s:on_cleverf_source')})\nlet g:clever_f_timeout_ms = 1 \" make clever_f unclever\n\ncall dein#add('mhinz/vim-sayonara') \" {{{\n  let g:sayonara_confirm_quit = 1\n\n  nnoremap Q :Sayonara<cr>\n  nnoremap <M-q> :Sayonara!<cr>\n\n  nnoremap <leader>q :xa<cr>\n  nnoremap <leader>z :qa!<cr>\n\" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Unite\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\ncall dein#add('Shougo/denite.nvim') \" {{{\n  call denite#custom#var('file_rec', 'command', ['ag', '--vimgrep', '--hidden',\n    \\ '--ignore', '.hg',\n    \\ '--ignore', '.svn',\n    \\ '--ignore', '.git',\n    \\ '--ignore', '.bzr',\n    \\ '--ignore', '.cache'])\n  call denite#custom#map('normal', 'Q', '<denite:quit>', 'noremap')\n\" }}}\ncall dein#add('Shougo/neomru.vim')\n\nnmap <space> [denite]\nnnoremap [denite] <nop>\n\nnnoremap <silent> [denite]l :<C-u>Denite line<cr>\nnnoremap <silent> [denite]m :<C-u>Denite file_mru <cr>\nnnoremap <silent> [denite]b :<C-u>Denite buffer<cr>\nnnoremap <silent> [denite]j :<C-u>JunkfileTodo<cr>\nnnoremap [denite]g :<C-u>Grep<space>\n\" nnoremap <silent> [denite]y :<C-u>Denite neoyank<cr>\n\n\" git project nav {{{\n  call denite#custom#alias('source', 'file_rec/git', 'file_rec')\n  call denite#custom#var('file_rec/git', 'command',\n    \\ ['git', 'ls-files', '-co', '--exclude-standard'])\n  nnoremap <silent> [denite]<space> :<C-u>Denite `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`<CR>\n\" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Textobj\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('kana/vim-textobj-user')\ncall dein#add('kana/vim-textobj-indent')\ncall dein#add('kana/vim-textobj-entire')\ncall dein#add('lucapette/vim-textobj-underscore')\ncall dein#add('beloglazov/vim-textobj-quotes')\ncall dein#add('kana/vim-textobj-line')\ncall dein#add('jasonlong/vim-textobj-css')\ncall dein#add('b4winckler/vim-angry')\ncall dein#add('saihoooooooo/vim-textobj-space')\n\n\" file text object\ncall textobj#user#plugin('file', {\n  \\ 'file': {\n  \\ 'pattern': '\\f\\+', 'select': ['af', 'if']\n  \\ }\n  \\ })\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Web\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('groenewege/vim-less', {'on_ft':['less']})\ncall dein#add('cakebaker/scss-syntax.vim', {'on_ft':['scss','sass']})\ncall dein#add('hail2u/vim-css3-syntax', {'on_ft':['css','scss','sass']})\ncall dein#add('othree/html5.vim', {'on_ft':['html','typescript']})\ncall dein#add('digitaltoad/vim-pug', {'on_ft':['pug', 'vue']})\ncall dein#add('mustache/vim-mustache-handlebars', {'on_ft':['mustache','handlebars']})\ncall dein#add('Valloric/MatchTagAlways')\ncall dein#add('slim-template/vim-slim', {'on_ft':['slim']})\ncall dein#add('mattn/emmet-vim', {'on_ft':['html','vue','xml','xsl','xslt','xsd','css','sass','scss','less','mustache','handlebars','ts','javascript','jsx','typescript','eruby']})\nautocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby imap <buffer><c-y><c-y> <c-y>,\nautocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby vmap <buffer><c-y><c-y> <c-y>,\n\n\" TextField to <TextField />\nautocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby imap <buffer><c-y>y <esc>ysiw>f>i<space>/<c-o>h\n\n\" Attribute deletion\nautocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby nm dA lF d2f\"\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Javascript\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('othree/yajs.vim')\ncall dein#add('kchmck/vim-coffee-script', {'on_ft':['coffee']})\ncall dein#add('mmalecki/vim-node.js', {'on_ft':['javascript']})\ncall dein#add('leshill/vim-json', {'on_ft':['javascript','json']})\ncall dein#add('othree/javascript-libraries-syntax.vim', {'on_ft':['javascript','coffee','ls','typescript']})\ncall dein#add('heavenshell/vim-jsdoc', {'on_ft':['javascript','typescript']})\n\nlet g:used_javascript_libs = 'underscore,ramda,react'\n\n\" typescript\n\" call dein#add('mhartington/nvim-typescript', { 'on_ft':['typescript'] })\ncall dein#add('leafgarland/typescript-vim', { 'on_ft':['typescript'] })\n\n\" flow\n\" call dein#add('flowtype/vim-flow', { 'on_ft':['javascript'] })\n\n\" vue\n\" call dein#add('posva/vim-vue')\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Ruby\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('tpope/vim-rails', {'on_ft':['ruby']})\ncall dein#add('rhysd/vim-textobj-ruby', {'on_ft':['ruby']})\ncall dein#add('fishbullet/deoplete-ruby', {'on_ft':['ruby']})\n\" call dein#add('thoughtbot/vim-rspec', {'on_ft':['ruby']})\n\nlet neosimpp_path = '~/.config/nvim/bundle/repos/github.com/Shougo/neosnippet-snippets/neosnippets/'\nexec \"au BufNewFile,BufRead Gemfile NeoSnippetSource \".neosimpp_path.\"Gemfile.snip\"\nexec \"au BufNewFile,BufRead *.rb NeoSnippetSource \".neosimpp_path.\"rails.snip\"\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Elm\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('ElmCast/elm-vim') \" {{{\n\"   let g:elm_format_autosave = 1\n\"   let g:elm_setup_keybindings = 0 \" use bindings from ftplugin/elm.vim\n\n\"   let g:syntastic_always_populate_loc_list = 1\n\"   let g:syntastic_auto_loc_list = 1\n\"   let g:elm_syntastic_show_warnings = 1\n\n\"   \" let g:deoplete#omni#functions.elm = ['elm#Complete']\n\"   \" let g:deoplete#omni#input_patterns.elm = '[^ \\t]+'\n\"   \" let g:deoplete#sources.elm = ['omni'] + g:deoplete#sources._\n\" \" }}}\n\" call dein#add('pbogut/deoplete-elm')\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Idris\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('idris-hackers/idris-vim')\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Python\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('hdima/python-syntax')\n\" let python_highlight_all = 1\n\" let python_version_2 = 1\n\ncall dein#add('vim-python/python-syntax')\nlet g:python_highlight_all = 1\nlet g:python_version_2 = 1\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Haskell\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('neovimhaskell/haskell-vim', { 'on_ft':['haskell'] })\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => C#\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('Robzz/deoplete-omnisharp', { 'on_ft':['cs'] })\n\" call dein#add('OmniSharp/omnisharp-vim', { 'on_ft':['cs'] })\n\" let g:deoplete#omni#functions = {}\n\" let g:deoplete#omni#functions.cs = 'OmniSharp#Complete'\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Purescript\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('purescript-contrib/purescript-vim', { 'on_ft':['purescript'] })\n\" call dein#add('FrigoEU/psc-ide-vim', { 'on_ft':['purescript'] })\n\" let g:psc_ide_log_level=4\n\n\" checking in file\n\" let g:deoplete#omni#input_patterns.purescript = '[^. *\\t]'\n\" let g:deoplete#omni#input_patterns.purescript = '[.\\w]+'\n\" checking wia `pulp -w build` (faster)\n\" let g:psc_ide_syntastic_mode = 0\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Misc\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('kana/vim-vspec') \" Testing framework\ncall dein#add('jparise/vim-graphql', {'on_ft':['graphql']})\ncall dein#add('tpope/vim-scriptease', {'on_ft':['vim']})\ncall dein#add('tpope/vim-markdown',{'on_ft':['markdown']})\ncall dein#add('PotatoesMaster/i3-vim-syntax',{'on_ft':['i3']})\ncall dein#add('chr4/nginx.vim',{'on_ft':['nginx']})\ncall dein#add('vim-scripts/vim-terraform',{'on_ft':['terraform']})\ncall dein#add('LnL7/vim-nix', { 'on_ft':['nix'] })\n\n\" call dein#add('takac/vim-hardtime') \" {{{\n\"   let g:hardtime_default_on = 1\n\"   let g:hardtime_allow_different_key = 1\n\"   let g:hardtime_maxcount = 2\n\n\"   \" doesnt work with wb actually\n\"   let s:hardtime_abandoned_keys = [\"h\", \"j\", \"k\", \"l\", \"-\", \"+\", \"W\", \"B\"]\n\"   let g:list_of_normal_keys = s:hardtime_abandoned_keys\n\"   let g:list_of_visual_keys = s:hardtime_abandoned_keys\n\n\"   \" let g:hardtime_ignore_buffer_patterns = [\".*fugitive.*\", \"[unite].*\"]\n\" \" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Documets editing\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('maksimr/vim-translator')\n\" call dein#add('suan/vim-instant-markdown')\n\n\" autocmd InsertEnter * silent! !xkbcomp $HOME/.config/layouts/ua $DISPLAY  > /dev/null 2&>1\n\" autocmd InsertLeave * silent! !xkbcomp $HOME/.config/layouts/en_ru $DISPLAY > /dev/null 2&>1\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => GUI\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('tpope/vim-dispatch') \" {{{\n\"   \" call dein#add('radenling/vim-dispatch-neovim')\n\"   nnoremap <leader>rd :Dispatch<space>\n\"   nnoremap <leader>rD :Copen<CR>\n\n\"   \" open file under cursor in window above\n\"   nmap <leader>gf yif<C-k>:e <M-p><CR>\n\" }}}\n\" call dein#add('bramblex/ranger.vim', { 'depends': 'rbgrouleff/bclose.vim' }) \" {{{\n\"   let g:ranger_path='SHELL=/home/srghma/.config/ranger/rshell ranger --cmd \"set colorscheme snow\"'\n\" \" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Mappings\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nnnoremap <M-8> #\n\nnnoremap <leader>w :w<cr>\nnnoremap <leader>tag :!ctags -R .<cr>\n\n\" toggle paste\nnnoremap <F6> :set invpaste<CR>:set paste?<CR>\n\n\" remap arrow keys\nnnoremap <left> :bprev<CR>\nnnoremap <right> :bnext<CR>\nnnoremap <up> :tabnext<CR>\nnnoremap <down> :tabprev<CR>\n\n\" unimpaired tabs\nnnoremap ]w :tabnext<CR>\nnnoremap [w :tabprev<CR>\n\n\" quick resizing\nnnoremap <M-h> <C-w>3<\nnnoremap <M-l> <C-w>3>\nnnoremap <M-j> <C-w>3-\nnnoremap <M-k> <C-w>3+\n\n\" change cursor position in command mode\ncnoremap <M-h> <left>\ncnoremap <M-l> <right>\ncnoremap <M-j> <down>\ncnoremap <M-k> <up>\n\n\" will be rewritten if tmux run\nnnoremap <C-h> <C-w>h\nnnoremap <C-j> <C-w>j\nnnoremap <C-k> <C-w>k\nnnoremap <C-l> <C-w>l\n\n\" kakoune like movements\nnoremap gh 0\nnoremap gi ^\nnoremap gl g_\nnoremap gj G\nnoremap gk gg\n\ninoremap <C-r> <C-r><C-p>\ninoremap <M-p> <C-r><C-p>+\ncnoremap <M-p> <C-r>+\n\nnnoremap p \"+p\nvnoremap p \"+p\nnnoremap <M-p> p\nvnoremap <M-p> p\n\nnnoremap P \"+P\nvnoremap P \"+P\nnnoremap <M-P> P\nvnoremap <M-P> P\n\nnnoremap y \"+y\nvnoremap y \"+y\nnnoremap <M-y> y\nvnoremap <M-y> y\n\nnnoremap Y \"+y$\nnnoremap <M-Y> y$\nvnoremap <M-Y> y$\n\nnnoremap ,d \"+d\nvnoremap ,d \"+d\nnnoremap ,D \"+D\nvnoremap ,D \"+D\n\n\" deleting\ninoremap <C-u> <C-g>u<C-u>\ninoremap <C-d> <Del>\n\n\" sane regex\nnnoremap / /\\v\nvnoremap / /\\v\nnnoremap ? ?\\v\nvnoremap ? ?\\v\n\" nnoremap :s/ :s/\\v\n\n\" quick substitute\nnnoremap dm :%s:::g<left><left><left>\nvnoremap dm :s:::g<left><left><left>\n\n\" command-line window\nnnoremap q: q:i\nnnoremap q/ q/i\nnnoremap q? q?i\n\n\" folds\nnnoremap zr zr:echo &foldlevel<cr>\nnnoremap zm zm:echo &foldlevel<cr>\nnnoremap zR zR:echo &foldlevel<cr>\nnnoremap zM zM:echo &foldlevel<cr>\n\n\" screen line scroll\nnnoremap <expr> j v:count > 1 ? \"j\" : \"gj\"\nnnoremap <expr> k v:count > 1 ? \"k\" : \"gk\"\n\n\" auto center\nnnoremap <silent> <C-o> <C-o>zz\nnnoremap <silent> <C-i> <C-i>zz\n\n\" reselect visual block after indent\nvnoremap < <gv\nvnoremap > >gv\n\n\" reselect last paste\nnnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'\n\n\" shortcuts for windows\nnnoremap <leader>v <C-w>v<C-w>l\nnnoremap <leader>s <C-w>s\nnnoremap <leader>vsa :vert sba<cr>\n\n\" tab shortcuts\nnnoremap <leader>tn :tab spl<CR>\nnnoremap <leader>tc :tabclose<CR>\n\n\" quick buffer open\nnnoremap gb :ls<cr>:e #\n\n\" general\nnnoremap <leader>l :set list! list?<cr>\nnnoremap <bs> :noh<cr>\nnnoremap <M-v> vg_\n\nnnoremap <C-s> <C-a>\nnnoremap <leader>R :so $MYVIMRC<CR>\n\n\" in nvim terminal emulator\ntnoremap <C-\\><C-\\> <C-\\><C-n>\ntnoremap <left> <C-\\><C-n>:bprev<CR>\ntnoremap <right> <C-\\><C-n>:bnext<CR>\ntnoremap <up> <C-\\><C-n>:tabnext<CR>\ntnoremap <down> <C-\\><C-n>:tabprev<CR>\n\n\" J and K like in nerdtree\nmap K <Plug>(IndentWiseBlockScopeBoundaryBegin)\nmap J <Plug>(IndentWiseBlockScopeBoundaryEnd)\n\nnnoremap <M-i> J\n\nfunction! RemoveNonascii() abort\n  exe \"normal! :s:\\ \\|(\\|)\\|\\.::g\"\nendfunction\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Finish\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('nanotech/jellybeans.vim')\ncall dein#add('ryanoasis/vim-devicons')\n\ncall dein#end()\n\nif dein#check_install()\n  call dein#install()\nendif\n\nautocmd VimEnter * call dein#call_hook('post_source')\n\nfiletype plugin indent on\nsyntax enable\ncolorscheme jellybeans\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Autocommands\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" go back to previous position of cursor if any\nautocmd BufReadPost *\n  \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") |\n  \\  exe 'normal! g`\"zvzz' |\n  \\ endif\n\n\" autosave\nautocmd FocusLost * silent! wall\nset autowriteall\n\nautocmd BufRead,BufNewFile *.conf setf dosini\n\nautocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}\nautocmd FileType python setlocal foldmethod=indent\nautocmd FileType markdown setlocal nolist\nautocmd FileType yaml,eruby.yaml setlocal tabstop=2 shiftwidth=2 commentstring=#\\ %s\n\" autocmd FileType typescript setlocal tabstop=2 shiftwidth=2 expandtab\n\n\" force filetype on odd extension\nau BufRead,BufNewFile Dockerfile.template set filetype=dockerfile\nau BufRead,BufNewFile *.js.erb set filetype=javascript\nau BufRead,BufNewFile *.mjml set filetype=slim\nau BufRead,BufNewFile Vagrantfile,Guardfile set filetype=ruby\n\n\" autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 expandtab\n\" autocmd FileType html,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=0 copyindent preserveindent noexpandtab\n\n\" nmap g[ 0ciw1<ESC>\n\" nmap g] 0kyiwjciw<M-p><ESC>\n","uri":"file:///home/srghma/.dotfiles/nvim/init.vim","version":0}
17:40:46 INFO main src/vim.rs:90 => Some("vim") {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"vim","text":"\" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0\n\" original from https://github.com/bling/dotvim\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Initialize defaults\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" setup & dein {{{\n  set rtp+=~/.config/nvim/bundle/repos/github.com/Shougo/dein.vim\n  call dein#begin(expand('~/.config/nvim/bundle/'))\n  call dein#add('Shougo/dein.vim')\n\"}}}\n\nlet s:cache_dir = '~/.config/nvim/.cache'\nlet s:settings = {}\nlet s:settings.default_indent = 2\nlet s:settings.max_column = 120\n\n\" helper functions\nfunction! s:get_cache_dir(suffix) \"{{{\n  return resolve(expand(s:cache_dir . '/' . a:suffix))\nendfunction \"}}}\n\nfunction! EnsureExists(path) \"{{{\n  if !isdirectory(expand(a:path))\n    call mkdir(expand(a:path))\n  endif\nendfunction \"}}}\n\n\" swap files\nlet &directory = s:get_cache_dir('swap')\nset noswapfile\n\ncall EnsureExists(s:cache_dir)\ncall EnsureExists(&directory)\n\nif !executable('ag')\n  echoerr('You must install silver searcher')\nendif\n\n\" base configuration\nset showfulltag\nset shell=/bin/sh\nset noshelltemp                                     \"use pipes\nset clipboard=unnamed\nset inccommand=nosplit\nset undofile\n\" set paste\n\n\" whitespace\nset expandtab                                       \"spaces instead of tabs\nlet &tabstop=s:settings.default_indent              \"number of spaces per tab for display\nlet &softtabstop=s:settings.default_indent          \"number of spaces per tab in insert mode\nlet &shiftwidth=s:settings.default_indent           \"number of spaces when indenting\nset list                                            \"highlight whitespace\nset listchars=tab:│\\ ,trail:•,extends:❯,precedes:❮,space:·\nset shiftround\nset linebreak\nlet &showbreak='↪ '\n\nset wildmode=list:full\nset wildignorecase\n\nset splitbelow\nset splitright\n\n\" searching\nset ignorecase                                      \"ignore case for searching\nset smartcase                                       \"do case-sensitive if there's a capital letter\nset grepprg=ag\\ --nogroup\\ --column\\ --smart-case\\ --nocolor\\ --follow\nset grepformat=%f:%l:%c:%m\n\nlet mapleader = \",\"\nlet g:mapleader = \",\"\nlet maplocalleader = \"\\\\\"\n\n\" ui configuration\nset showmatch                                       \"automatically highlight matching braces/brackets/etc.\nset matchtime=2                                     \"tens of a second to show matching parentheses\nset number\nset lazyredraw\nset noshowmode\nset foldmethod=syntax                               \"fold via syntax of files\nset foldlevelstart=99                               \"open all folds by default\nlet g:xml_syntax_folding=1                          \"enable xml folding\nset completeopt-=preview\n\nset cursorline\nautocmd WinLeave * setlocal nocursorline\nautocmd WinEnter * setlocal cursorline\nlet &colorcolumn=s:settings.max_column\n\n\" set hidden\n\n\" shared helper\nfunction! Preserve(command) \"{{{\n  \" preparation: save last search, and cursor position.\n  let _s=@/\n  let l = line(\".\")\n  let c = col(\".\")\n  \" do the business:\n  execute a:command\n  \" clean up: restore previous search history, and cursor position\n  let @/=_s\n  call cursor(l, c)\nendfunction \"}}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Core\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('vim-scripts/matchit.zip')\ncall dein#add('vim-airline/vim-airline') \"{{{\n  let g:airline_powerline_fonts = 1\n  let g:airline#extensions#tabline#enabled = 1\n  let g:airline#extensions#tabline#left_sep = ' '\n  let g:airline#extensions#tabline#left_alt_sep = '¦'\n  let g:airline#extensions#tabline#buffer_idx_mode = 1\n  let g:airline#extensions#syntastic#enabled = 1\n  nmap <leader>1 <Plug>AirlineSelectTab1\n  nmap <leader>2 <Plug>AirlineSelectTab2\n  nmap <leader>3 <Plug>AirlineSelectTab3\n  nmap <leader>4 <Plug>AirlineSelectTab4\n  nmap <leader>5 <Plug>AirlineSelectTab5\n  nmap <leader>6 <Plug>AirlineSelectTab6\n  nmap <leader>7 <Plug>AirlineSelectTab7\n  nmap <leader>8 <Plug>AirlineSelectTab8\n  nmap <leader>9 <Plug>AirlineSelectTab9\n\"}}}\ncall dein#add('tpope/vim-surround')\ncall dein#add('tpope/vim-repeat')\ncall dein#add('tpope/vim-unimpaired') \"{{{\n  nmap <c-up> [e\n  nmap <c-down> ]e\n  vmap <c-up> [egv\n  vmap <c-down> ]egv\n\"}}}\n\" call dein#add('qpkorr/vim-bufkill')\ncall dein#add('mhinz/vim-startify') \"{{{\n  let g:startify_session_dir = s:get_cache_dir('sessions')\n  let g:startify_change_to_vcs_root = 1\n  let g:startify_show_sessions = 1\n  let g:startify_session_before_save = [\n      \\ 'tabdo NERDTreeClose'\n      \\ ]\n  let g:startify_disable_at_vimenter = 1\n\n  \" enter last opened file if session was saved\n  autocmd VimEnter * nested\n    \\   if !argc()\n    \\ |   silent! execute \":SLoad \" . fnamemodify(getcwd(), ':t')\n    \\ |   redraw!\n    \\ | endif\n\n  nnoremap <F1> :Startify<cr>\n  nnoremap <leader>S :SSave <C-R>=fnamemodify(getcwd(), ':t')<cr><cr>\n\"}}}\ncall dein#add('neomake/neomake') \" {{{\n  autocmd! BufWritePost * Neomake\n  let g:neomake_open_list = 0\n  \" let g:neomake_verbose = 3\n\n  let g:neomake_ruby_enabled_makers = ['rubocop']\n  let g:neomake_typescript_enabled_makers = ['tslint']\n  \" let g:neomake_typescript_tslint_args = ['--fix']\n\n  \" flow fix\n  \" call dein#add('benjie/neomake-local-eslint.vim')\n\" }}}\ncall dein#add('zhaocai/GoldenView.Vim', {'on_map':['<Plug>ToggleGoldenViewAutoResize']}) \"{{{\n  let g:goldenview__enable_default_mapping=0\n\"}}}\ncall dein#add('jszakmeister/vim-togglecursor')\n\n\" search with autocenter and autohide {{{\n  call dein#add('haya14busa/is.vim')\n  let g:is#do_default_mappings = 1\n\n  call dein#add('haya14busa/vim-asterisk')\n  let g:asterisk#keeppos = 1\n\n  map n <Plug>(is-n)zz\n  map N <Plug>(is-N)zz\n  map *  <Plug>(asterisk-z*)zz<Plug>(is-nohl-1)\n  map g* <Plug>(asterisk-gz*)zz<Plug>(is-nohl-1)\n  \" using comment on this\n  \" map #  <Plug>(asterisk-z#)zz<Plug>(is-nohl-1)\n  \" map g# <Plug>(asterisk-gz#)zz<Plug>(is-nohl-1)\n\" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Git\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('airblade/vim-gitgutter') \" {{{\n  nmap ]h <Plug>GitGutterNextHunk\n  nmap [h <Plug>GitGutterPrevHunk\n\" }}}\ncall dein#add('tpope/vim-fugitive') \"{{{\n  nnoremap <silent> <leader>ga :Git add --all<CR>\n  nnoremap <silent> <leader>gs :Gstatus<CR>\n  nnoremap <silent> <leader>gd :Gdiff<CR>\n  nnoremap <silent> <leader>gc :Gcommit<CR>\n  nnoremap <silent> <leader>gb :Gblame<CR>\n  nnoremap <silent> <leader>gl :Glog<CR>\n  nnoremap <silent> <leader>gp :Git push<CR>\n  nnoremap <silent> <leader>gw :Gwrite<CR>\n  nnoremap <silent> <leader>gr :Gremove<CR>\n  autocmd BufReadPost fugitive://* set bufhidden=delete\n\"}}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Autocomplete\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('Shougo/neosnippet-snippets')\ncall dein#add('Shougo/neosnippet') \" {{{\n  set conceallevel=2 concealcursor=niv\n  let g:neosnippet#snippets_directory='~/.config/nvim/snippets'\n\n  imap <C-k> <Plug>(neosnippet_expand_or_jump)\n  smap <C-k> <Plug>(neosnippet_expand_or_jump)\n  xmap <C-k> <Plug>(neosnippet_expand_target)\n\n  inoremap <expr><TAB>\n    \\ pumvisible() ? \"\\<C-n>\" :\n    \\ neosnippet#expandable_or_jumpable() ?\n    \\    \"\\<Plug>(neosnippet_expand_or_jump)\" : \"\\<TAB>\"\n  snoremap <expr><TAB> neosnippet#expandable_or_jumpable() ?\n    \\ \"\\<Plug>(neosnippet_expand_or_jump)\" : \"\\<TAB>\"\n\n\" }}}\n\ncall dein#add('Shougo/deoplete.nvim') \" {{{\n  let g:deoplete#enable_at_startup = 1\n  let g:deoplete#auto_complete_delay = 150\n\n  \" initialize with empty, to use it later on per language\n  let g:deoplete#omni#input_patterns = {}\n\n  \" set completeopt=longest,menuone,preview\n  \"Amount of entries in completion popup\n\" }}}\ncall dein#add('Shougo/echodoc.vim') \" {{{\n  set cmdheight=2\n  let g:echodoc_enable_at_startup = 1\n\" }}}\n\" \" call dein#add('thalesmello/webcomplete.vim')\n\ncall dein#add('autozimu/LanguageClient-neovim', {\n    \\ 'rev': 'next',\n    \\ 'build': './install.sh',\n    \\ })\n\nlet g:LanguageClient_serverCommands = {\n    \\ 'javascript': ['javascript-typescript-stdio'],\n    \\ 'typescript': ['javascript-typescript-stdio'],\n    \\ 'haskell': ['hie', '--lsp'],\n    \\ 'nix': ['nix-lsp'],\n    \\ }\n\n\" let g:LanguageClient_devel = 1 \" Use rust debug build\nlet g:LanguageClient_loggingLevel = 'DEBUG' \" Use highest logging level\n\" let g:LanguageClient_loggingFile = 'nvim.log' \" Use highest logging level\n\" let g:LanguageClient_serverStderr = 'language-server.log' \" Use highest logging level\n\n\" Automatically start language servers.\nlet g:LanguageClient_autoStart = 1\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Tmux\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('christoomey/vim-tmux-navigator')\n\nif $TMUX != ''\n  call dein#add('tmux-plugins/vim-tmux')\n  call dein#add('wellle/tmux-complete.vim')\n  call dein#add('benmills/vimux') \" {{{\n    let g:VimuxRunnerType = \"window\"\n    let g:VimuxUseNearest = 0\n\n    nnoremap <leader>tt :VimuxTogglePane<CR>\n    nnoremap <leader>to :call VimuxOpenRunner()<CR>\n    nnoremap <Leader>tl :VimuxRunLastCommand<CR>\n    nnoremap <Leader>tr ::call VimuxRunCommand(\"yr run && cat output/pipePFn.d.ts\")<CR>\n  \" }}}\n\n  \" tmux status line\n  autocmd VimEnter * silent! !tmux source ~/.dotfiles/tmux/themes/jellybeans_tmuxline\n  autocmd VimLeave * silent! !tmux source ~/.dotfiles/tmux/themes/iceberg_tmuxline\n\n  \" call dein#add('edkolev/tmuxline.vim') \" {{{\n  \"   let g:tmuxline_theme = 'jellybeans'\n  \"   let g:tmuxline_preset = 'minimal'\n  \" \" }}}\nendif\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Editing\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('editorconfig/editorconfig-vim', {'on_i':1})\ncall dein#add('tpope/vim-endwise')\ncall dein#add('tpope/vim-speeddating')\ncall dein#add('thinca/vim-visualstar')\n\nfunction s:on_commentary_source()\n  xmap # gc\n  omap # gc\n  nmap # gcc\nendfunction\ncall dein#add('tpope/vim-commentary', {'hook_post_source': function('s:on_commentary_source')})\n\ncall dein#add('terryma/vim-expand-region') \" mapping - + and _\ncall dein#add('chrisbra/NrrwRgn') \" mapping - ,nr\ncall dein#add('jiangmiao/auto-pairs') \"{{{\n  let g:AutoPairsShortcutToggle = ''\n  let g:AutoPairsMapCh = 0 \" I use `move to left pane` here\n  let g:AutoPairsFlyMode = 0\n  let g:AutoPairsShortcutBackInsert = ''\n  let g:AutoPairsMultilineClose = 0\n\"}}}\ncall dein#add('justinmk/vim-sneak') \"{{{\n  let g:sneak#streak = 1\n\"}}}\ncall dein#add('tommcdo/vim-exchange')\ncall dein#add('junegunn/vim-easy-align') \" {{{\n  xmap ga <Plug>(EasyAlign)\n  nmap ga <Plug>(EasyAlign)\n\" }}}\ncall dein#add('bkad/CamelCaseMotion') \" {{{\n  map <silent> w <Plug>CamelCaseMotion_w\n  map <silent> b <Plug>CamelCaseMotion_b\n  map <silent> e <Plug>CamelCaseMotion_e\n  map <silent> ge <Plug>CamelCaseMotion_ge\n  sunmap w\n  sunmap b\n  sunmap e\n  sunmap ge\n\" }}}\ncall dein#add('jeetsukumaran/vim-indentwise')\ncall dein#add('AndrewRadev/splitjoin.vim') \" {{{\n  let g:splitjoin_ruby_hanging_args=0\n\" }}}\n\" mapping - gJ, gS\ncall dein#add('tpope/vim-abolish') \" {{{\n  \" abolish current highlightment\n  nnoremap <leader>a \"+y//e<CR>:%Subvert:::g<left><left><left><C-r>+<right>\n  nnoremap <leader>A :%Subvert:::g<left><left><left>\n  vmap     <leader>A :Subvert:::g<left><left><left>\n\" }}}\n\ncall dein#add('itchyny/vim-cursorword') \" underscore word under cursor\ncall dein#add('AndrewRadev/switch.vim') \" mapping - gs\ncall dein#add('romgrk/replace.vim') \" {{{\n  let g:replace_register = '_'\n  nmap R \"+<Plug>ReplaceOperator\n  vmap R \"+<Plug>ReplaceOperator\n\n  nmap X \"+<Plug>ExchangeOperator\n  nmap RR cc<C-R>+<esc>\n\" }}}\n\ncall dein#add('AndrewRadev/deleft.vim') \" mapping - dh\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Navigation\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\"call dein#add('mileszs/ack.vim') \"{{{\n\"  let g:ackprg = \"ag --nogroup --column --smart-case --follow\"\n\"\"}}}\ncall dein#add('dkprice/vim-easygrep') \"{{{\n  let g:EasyGrepRecursive=1\n  let g:EasyGrepAllOptionsInExplorer=1\n  let g:EasyGrepCommand=1\n  let g:EasyGrepFilesToExclude=\".svn,.git,node_modules\"\n  nnoremap <leader>vo :GrepOptions<cr>\n\"}}}\ncall dein#add('mbbill/undotree', {'on_cmd':'UndotreeToggle'}) \"{{{\n  let g:undotree_SplitLocation='botright'\n  let g:undotree_SetFocusWhenToggle=1\n  nnoremap <silent> <F5> :UndotreeToggle<CR>\n\"}}}\ncall dein#add('scrooloose/nerdtree', {'on_cmd':['NERDTreeToggle','NERDTreeFind']}) \"{{{\n  let NERDTreeShowHidden=1\n  let NERDTreeQuitOnOpen=0\n  let NERDTreeShowLineNumbers=1\n  let NERDTreeChDirMode=0\n  let NERDTreeShowBookmarks=1\n  let NERDTreeIgnore=['\\.git$','\\.hg$','\\node_modules$','\\.pyc$']\n  let NERDTreeBookmarksFile=s:get_cache_dir('NERDTreeBookmarks')\n\n  \" disable f and F in privilege of find commands\n  let g:NERDTreeMapOpenVSplit='V'\n  let g:NERDTreeMapToggleFiles=''\n  let g:NERDTreeMapToggleFilters=''\n  let g:NERDTreeMapHelp='<M-/>'\n\n  let g:NERDTreeMapQuit='Q'\n  nnoremap <F2> :NERDTreeToggle<CR>\n  nnoremap <F3> :NERDTreeFind<CR>\n\"}}}\n\n\"call dein#add('majutsushi/tagbar', {'on_cmd':'TagbarToggle'}) \"{{{\n\"  nnoremap <silent> <F9> :TagbarToggle<CR>\n\"\"}}}\ncall dein#add('kshenoy/vim-signature')\ncall dein#add('myusuf3/numbers.vim') \" {{{\n  nnoremap <silent> <F7> :NumbersToggle<cr>\n\" }}}\n\nfunction s:on_cleverf_source()\n  \" kakoune like find\n  nmap <M-.> <Plug>(clever-f-repeat-forward)\n  xmap <M-.> <Plug>(clever-f-repeat-forward)\n  omap <M-.> <Plug>(clever-f-repeat-forward)\n  nmap <M->> <Plug>(clever-f-repeat-back)\n  xmap <M->> <Plug>(clever-f-repeat-back)\n  omap <M->> <Plug>(clever-f-repeat-back)\nendfunction\ncall dein#add('rhysd/clever-f.vim', {'hook_post_source': function('s:on_cleverf_source')})\nlet g:clever_f_timeout_ms = 1 \" make clever_f unclever\n\ncall dein#add('mhinz/vim-sayonara') \" {{{\n  let g:sayonara_confirm_quit = 1\n\n  nnoremap Q :Sayonara<cr>\n  nnoremap <M-q> :Sayonara!<cr>\n\n  nnoremap <leader>q :xa<cr>\n  nnoremap <leader>z :qa!<cr>\n\" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Unite\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\ncall dein#add('Shougo/denite.nvim') \" {{{\n  call denite#custom#var('file_rec', 'command', ['ag', '--vimgrep', '--hidden',\n    \\ '--ignore', '.hg',\n    \\ '--ignore', '.svn',\n    \\ '--ignore', '.git',\n    \\ '--ignore', '.bzr',\n    \\ '--ignore', '.cache'])\n  call denite#custom#map('normal', 'Q', '<denite:quit>', 'noremap')\n\" }}}\ncall dein#add('Shougo/neomru.vim')\n\nnmap <space> [denite]\nnnoremap [denite] <nop>\n\nnnoremap <silent> [denite]l :<C-u>Denite line<cr>\nnnoremap <silent> [denite]m :<C-u>Denite file_mru <cr>\nnnoremap <silent> [denite]b :<C-u>Denite buffer<cr>\nnnoremap <silent> [denite]j :<C-u>JunkfileTodo<cr>\nnnoremap [denite]g :<C-u>Grep<space>\n\" nnoremap <silent> [denite]y :<C-u>Denite neoyank<cr>\n\n\" git project nav {{{\n  call denite#custom#alias('source', 'file_rec/git', 'file_rec')\n  call denite#custom#var('file_rec/git', 'command',\n    \\ ['git', 'ls-files', '-co', '--exclude-standard'])\n  nnoremap <silent> [denite]<space> :<C-u>Denite `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`<CR>\n\" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Textobj\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('kana/vim-textobj-user')\ncall dein#add('kana/vim-textobj-indent')\ncall dein#add('kana/vim-textobj-entire')\ncall dein#add('lucapette/vim-textobj-underscore')\ncall dein#add('beloglazov/vim-textobj-quotes')\ncall dein#add('kana/vim-textobj-line')\ncall dein#add('jasonlong/vim-textobj-css')\ncall dein#add('b4winckler/vim-angry')\ncall dein#add('saihoooooooo/vim-textobj-space')\n\n\" file text object\ncall textobj#user#plugin('file', {\n  \\ 'file': {\n  \\ 'pattern': '\\f\\+', 'select': ['af', 'if']\n  \\ }\n  \\ })\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Web\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('groenewege/vim-less', {'on_ft':['less']})\ncall dein#add('cakebaker/scss-syntax.vim', {'on_ft':['scss','sass']})\ncall dein#add('hail2u/vim-css3-syntax', {'on_ft':['css','scss','sass']})\ncall dein#add('othree/html5.vim', {'on_ft':['html','typescript']})\ncall dein#add('digitaltoad/vim-pug', {'on_ft':['pug', 'vue']})\ncall dein#add('mustache/vim-mustache-handlebars', {'on_ft':['mustache','handlebars']})\ncall dein#add('Valloric/MatchTagAlways')\ncall dein#add('slim-template/vim-slim', {'on_ft':['slim']})\ncall dein#add('mattn/emmet-vim', {'on_ft':['html','vue','xml','xsl','xslt','xsd','css','sass','scss','less','mustache','handlebars','ts','javascript','jsx','typescript','eruby']})\nautocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby imap <buffer><c-y><c-y> <c-y>,\nautocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby vmap <buffer><c-y><c-y> <c-y>,\n\n\" TextField to <TextField />\nautocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby imap <buffer><c-y>y <esc>ysiw>f>i<space>/<c-o>h\n\n\" Attribute deletion\nautocmd FileType html,vue,xml,xsl,xslt,xsd,css,sass,scss,less,mustache,handlebars,ts,javascript,jsx,typescript,eruby nm dA lF d2f\"\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Javascript\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('othree/yajs.vim')\ncall dein#add('kchmck/vim-coffee-script', {'on_ft':['coffee']})\ncall dein#add('mmalecki/vim-node.js', {'on_ft':['javascript']})\ncall dein#add('leshill/vim-json', {'on_ft':['javascript','json']})\ncall dein#add('othree/javascript-libraries-syntax.vim', {'on_ft':['javascript','coffee','ls','typescript']})\ncall dein#add('heavenshell/vim-jsdoc', {'on_ft':['javascript','typescript']})\n\nlet g:used_javascript_libs = 'underscore,ramda,react'\n\n\" typescript\n\" call dein#add('mhartington/nvim-typescript', { 'on_ft':['typescript'] })\ncall dein#add('leafgarland/typescript-vim', { 'on_ft':['typescript'] })\n\n\" flow\n\" call dein#add('flowtype/vim-flow', { 'on_ft':['javascript'] })\n\n\" vue\n\" call dein#add('posva/vim-vue')\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Ruby\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('tpope/vim-rails', {'on_ft':['ruby']})\ncall dein#add('rhysd/vim-textobj-ruby', {'on_ft':['ruby']})\ncall dein#add('fishbullet/deoplete-ruby', {'on_ft':['ruby']})\n\" call dein#add('thoughtbot/vim-rspec', {'on_ft':['ruby']})\n\nlet neosimpp_path = '~/.config/nvim/bundle/repos/github.com/Shougo/neosnippet-snippets/neosnippets/'\nexec \"au BufNewFile,BufRead Gemfile NeoSnippetSource \".neosimpp_path.\"Gemfile.snip\"\nexec \"au BufNewFile,BufRead *.rb NeoSnippetSource \".neosimpp_path.\"rails.snip\"\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Elm\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('ElmCast/elm-vim') \" {{{\n\"   let g:elm_format_autosave = 1\n\"   let g:elm_setup_keybindings = 0 \" use bindings from ftplugin/elm.vim\n\n\"   let g:syntastic_always_populate_loc_list = 1\n\"   let g:syntastic_auto_loc_list = 1\n\"   let g:elm_syntastic_show_warnings = 1\n\n\"   \" let g:deoplete#omni#functions.elm = ['elm#Complete']\n\"   \" let g:deoplete#omni#input_patterns.elm = '[^ \\t]+'\n\"   \" let g:deoplete#sources.elm = ['omni'] + g:deoplete#sources._\n\" \" }}}\n\" call dein#add('pbogut/deoplete-elm')\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Idris\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('idris-hackers/idris-vim')\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Python\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('hdima/python-syntax')\n\" let python_highlight_all = 1\n\" let python_version_2 = 1\n\ncall dein#add('vim-python/python-syntax')\nlet g:python_highlight_all = 1\nlet g:python_version_2 = 1\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Haskell\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('neovimhaskell/haskell-vim', { 'on_ft':['haskell'] })\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => C#\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('Robzz/deoplete-omnisharp', { 'on_ft':['cs'] })\n\" call dein#add('OmniSharp/omnisharp-vim', { 'on_ft':['cs'] })\n\" let g:deoplete#omni#functions = {}\n\" let g:deoplete#omni#functions.cs = 'OmniSharp#Complete'\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Purescript\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('purescript-contrib/purescript-vim', { 'on_ft':['purescript'] })\n\" call dein#add('FrigoEU/psc-ide-vim', { 'on_ft':['purescript'] })\n\" let g:psc_ide_log_level=4\n\n\" checking in file\n\" let g:deoplete#omni#input_patterns.purescript = '[^. *\\t]'\n\" let g:deoplete#omni#input_patterns.purescript = '[.\\w]+'\n\" checking wia `pulp -w build` (faster)\n\" let g:psc_ide_syntastic_mode = 0\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Misc\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('kana/vim-vspec') \" Testing framework\ncall dein#add('jparise/vim-graphql', {'on_ft':['graphql']})\ncall dein#add('tpope/vim-scriptease', {'on_ft':['vim']})\ncall dein#add('tpope/vim-markdown',{'on_ft':['markdown']})\ncall dein#add('PotatoesMaster/i3-vim-syntax',{'on_ft':['i3']})\ncall dein#add('chr4/nginx.vim',{'on_ft':['nginx']})\ncall dein#add('vim-scripts/vim-terraform',{'on_ft':['terraform']})\ncall dein#add('LnL7/vim-nix', { 'on_ft':['nix'] })\n\n\" call dein#add('takac/vim-hardtime') \" {{{\n\"   let g:hardtime_default_on = 1\n\"   let g:hardtime_allow_different_key = 1\n\"   let g:hardtime_maxcount = 2\n\n\"   \" doesnt work with wb actually\n\"   let s:hardtime_abandoned_keys = [\"h\", \"j\", \"k\", \"l\", \"-\", \"+\", \"W\", \"B\"]\n\"   let g:list_of_normal_keys = s:hardtime_abandoned_keys\n\"   let g:list_of_visual_keys = s:hardtime_abandoned_keys\n\n\"   \" let g:hardtime_ignore_buffer_patterns = [\".*fugitive.*\", \"[unite].*\"]\n\" \" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Documets editing\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('maksimr/vim-translator')\n\" call dein#add('suan/vim-instant-markdown')\n\n\" autocmd InsertEnter * silent! !xkbcomp $HOME/.config/layouts/ua $DISPLAY  > /dev/null 2&>1\n\" autocmd InsertLeave * silent! !xkbcomp $HOME/.config/layouts/en_ru $DISPLAY > /dev/null 2&>1\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => GUI\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" call dein#add('tpope/vim-dispatch') \" {{{\n\"   \" call dein#add('radenling/vim-dispatch-neovim')\n\"   nnoremap <leader>rd :Dispatch<space>\n\"   nnoremap <leader>rD :Copen<CR>\n\n\"   \" open file under cursor in window above\n\"   nmap <leader>gf yif<C-k>:e <M-p><CR>\n\" }}}\n\" call dein#add('bramblex/ranger.vim', { 'depends': 'rbgrouleff/bclose.vim' }) \" {{{\n\"   let g:ranger_path='SHELL=/home/srghma/.config/ranger/rshell ranger --cmd \"set colorscheme snow\"'\n\" \" }}}\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Mappings\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nnnoremap <M-8> #\n\nnnoremap <leader>w :w<cr>\nnnoremap <leader>tag :!ctags -R .<cr>\n\n\" toggle paste\nnnoremap <F6> :set invpaste<CR>:set paste?<CR>\n\n\" remap arrow keys\nnnoremap <left> :bprev<CR>\nnnoremap <right> :bnext<CR>\nnnoremap <up> :tabnext<CR>\nnnoremap <down> :tabprev<CR>\n\n\" unimpaired tabs\nnnoremap ]w :tabnext<CR>\nnnoremap [w :tabprev<CR>\n\n\" quick resizing\nnnoremap <M-h> <C-w>3<\nnnoremap <M-l> <C-w>3>\nnnoremap <M-j> <C-w>3-\nnnoremap <M-k> <C-w>3+\n\n\" change cursor position in command mode\ncnoremap <M-h> <left>\ncnoremap <M-l> <right>\ncnoremap <M-j> <down>\ncnoremap <M-k> <up>\n\n\" will be rewritten if tmux run\nnnoremap <C-h> <C-w>h\nnnoremap <C-j> <C-w>j\nnnoremap <C-k> <C-w>k\nnnoremap <C-l> <C-w>l\n\n\" kakoune like movements\nnoremap gh 0\nnoremap gi ^\nnoremap gl g_\nnoremap gj G\nnoremap gk gg\n\ninoremap <C-r> <C-r><C-p>\ninoremap <M-p> <C-r><C-p>+\ncnoremap <M-p> <C-r>+\n\nnnoremap p \"+p\nvnoremap p \"+p\nnnoremap <M-p> p\nvnoremap <M-p> p\n\nnnoremap P \"+P\nvnoremap P \"+P\nnnoremap <M-P> P\nvnoremap <M-P> P\n\nnnoremap y \"+y\nvnoremap y \"+y\nnnoremap <M-y> y\nvnoremap <M-y> y\n\nnnoremap Y \"+y$\nnnoremap <M-Y> y$\nvnoremap <M-Y> y$\n\nnnoremap ,d \"+d\nvnoremap ,d \"+d\nnnoremap ,D \"+D\nvnoremap ,D \"+D\n\n\" deleting\ninoremap <C-u> <C-g>u<C-u>\ninoremap <C-d> <Del>\n\n\" sane regex\nnnoremap / /\\v\nvnoremap / /\\v\nnnoremap ? ?\\v\nvnoremap ? ?\\v\n\" nnoremap :s/ :s/\\v\n\n\" quick substitute\nnnoremap dm :%s:::g<left><left><left>\nvnoremap dm :s:::g<left><left><left>\n\n\" command-line window\nnnoremap q: q:i\nnnoremap q/ q/i\nnnoremap q? q?i\n\n\" folds\nnnoremap zr zr:echo &foldlevel<cr>\nnnoremap zm zm:echo &foldlevel<cr>\nnnoremap zR zR:echo &foldlevel<cr>\nnnoremap zM zM:echo &foldlevel<cr>\n\n\" screen line scroll\nnnoremap <expr> j v:count > 1 ? \"j\" : \"gj\"\nnnoremap <expr> k v:count > 1 ? \"k\" : \"gk\"\n\n\" auto center\nnnoremap <silent> <C-o> <C-o>zz\nnnoremap <silent> <C-i> <C-i>zz\n\n\" reselect visual block after indent\nvnoremap < <gv\nvnoremap > >gv\n\n\" reselect last paste\nnnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'\n\n\" shortcuts for windows\nnnoremap <leader>v <C-w>v<C-w>l\nnnoremap <leader>s <C-w>s\nnnoremap <leader>vsa :vert sba<cr>\n\n\" tab shortcuts\nnnoremap <leader>tn :tab spl<CR>\nnnoremap <leader>tc :tabclose<CR>\n\n\" quick buffer open\nnnoremap gb :ls<cr>:e #\n\n\" general\nnnoremap <leader>l :set list! list?<cr>\nnnoremap <bs> :noh<cr>\nnnoremap <M-v> vg_\n\nnnoremap <C-s> <C-a>\nnnoremap <leader>R :so $MYVIMRC<CR>\n\n\" in nvim terminal emulator\ntnoremap <C-\\><C-\\> <C-\\><C-n>\ntnoremap <left> <C-\\><C-n>:bprev<CR>\ntnoremap <right> <C-\\><C-n>:bnext<CR>\ntnoremap <up> <C-\\><C-n>:tabnext<CR>\ntnoremap <down> <C-\\><C-n>:tabprev<CR>\n\n\" J and K like in nerdtree\nmap K <Plug>(IndentWiseBlockScopeBoundaryBegin)\nmap J <Plug>(IndentWiseBlockScopeBoundaryEnd)\n\nnnoremap <M-i> J\n\nfunction! RemoveNonascii() abort\n  exe \"normal! :s:\\ \\|(\\|)\\|\\.::g\"\nendfunction\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Finish\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ncall dein#add('nanotech/jellybeans.vim')\ncall dein#add('ryanoasis/vim-devicons')\n\ncall dein#end()\n\nif dein#check_install()\n  call dein#install()\nendif\n\nautocmd VimEnter * call dein#call_hook('post_source')\n\nfiletype plugin indent on\nsyntax enable\ncolorscheme jellybeans\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => Autocommands\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" go back to previous position of cursor if any\nautocmd BufReadPost *\n  \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") |\n  \\  exe 'normal! g`\"zvzz' |\n  \\ endif\n\n\" autosave\nautocmd FocusLost * silent! wall\nset autowriteall\n\nautocmd BufRead,BufNewFile *.conf setf dosini\n\nautocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}\nautocmd FileType python setlocal foldmethod=indent\nautocmd FileType markdown setlocal nolist\nautocmd FileType yaml,eruby.yaml setlocal tabstop=2 shiftwidth=2 commentstring=#\\ %s\n\" autocmd FileType typescript setlocal tabstop=2 shiftwidth=2 expandtab\n\n\" force filetype on odd extension\nau BufRead,BufNewFile Dockerfile.template set filetype=dockerfile\nau BufRead,BufNewFile *.js.erb set filetype=javascript\nau BufRead,BufNewFile *.mjml set filetype=slim\nau BufRead,BufNewFile Vagrantfile,Guardfile set filetype=ruby\n\n\" autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 expandtab\n\" autocmd FileType html,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=0 copyindent preserveindent noexpandtab\n\n\" nmap g[ 0ciw1<ESC>\n\" nmap g] 0kyiwjciw<M-p><ESC>\n","uri":"file:///home/srghma/.dotfiles/nvim/init.vim","version":0}}}
17:40:46 INFO reader-main src/vim.rs:389 <= None {"method": "languageClient/handleBufWritePost", "jsonrpc": "2.0", "params": {"languageId": "vim", "buftype": "", "filename": "/home/srghma/.dotfiles/nvim/init.vim"}}
17:40:46 INFO main src/languageclient.rs:2100 Begin languageClient/handleBufWritePost
17:40:46 INFO main src/languageclient.rs:1727 Begin textDocument/didSave
17:40:46 INFO main src/languageclient.rs:46 gather_args: [Buftype, LanguageId, Filename] = [String(""), String("vim"), String("/home/srghma/.dotfiles/nvim/init.vim")]
17:40:46 INFO main src/vim.rs:90 => Some("vim") {"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/srghma/.dotfiles/nvim/init.vim"}}}
17:41:53 INFO reader-main src/vim.rs:389 <= None {"method": "exit", "jsonrpc": "2.0", "params": {"languageId": "vim", "buftype": ""}}
17:41:53 INFO main src/languageclient.rs:1909 Begin exit
17:41:53 INFO main src/languageclient.rs:46 gather_args: [LanguageId] = [String("vim")]
17:41:53 INFO main src/vim.rs:90 => Some("vim") {"jsonrpc":"2.0","method":"exit","params":null}
17:41:53 ERROR main src/languageclient.rs:1918 Error: NoLanguageServer { languageId: "vim" }
17:41:53 INFO main src/languageclient.rs:670 Begin cleanup
17:41:53 ERROR main src/languageclient.rs:1921 Error: ErrorMessage { msg: "No project root found! languageId: vim" }
17:41:53 INFO main src/languageclient.rs:1923 End exit
